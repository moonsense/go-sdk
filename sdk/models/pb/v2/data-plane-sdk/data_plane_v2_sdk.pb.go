// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: data_plane_v2_sdk.proto

package v2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	bundle "moonsense.io/sdk/models/pb/v2/bundle"
	common "moonsense.io/sdk/models/pb/v2/common"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note: This should be deprecated in favor of common.DevicePlatform
type SessionMetadata_Platform int32

const (
	SessionMetadata_UNKNOWN SessionMetadata_Platform = 0
	SessionMetadata_iOS     SessionMetadata_Platform = 1
	SessionMetadata_ANDROID SessionMetadata_Platform = 2
	SessionMetadata_WEB     SessionMetadata_Platform = 3
)

// Enum value maps for SessionMetadata_Platform.
var (
	SessionMetadata_Platform_name = map[int32]string{
		0: "UNKNOWN",
		1: "iOS",
		2: "ANDROID",
		3: "WEB",
	}
	SessionMetadata_Platform_value = map[string]int32{
		"UNKNOWN": 0,
		"iOS":     1,
		"ANDROID": 2,
		"WEB":     3,
	}
)

func (x SessionMetadata_Platform) Enum() *SessionMetadata_Platform {
	p := new(SessionMetadata_Platform)
	*p = x
	return p
}

func (x SessionMetadata_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionMetadata_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_data_plane_v2_sdk_proto_enumTypes[0].Descriptor()
}

func (SessionMetadata_Platform) Type() protoreflect.EnumType {
	return &file_data_plane_v2_sdk_proto_enumTypes[0]
}

func (x SessionMetadata_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionMetadata_Platform.Descriptor instead.
func (SessionMetadata_Platform) EnumDescriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{3, 0}
}

// Geographic coordinates
// https://gsp.humboldt.edu/olm/Lessons/GIS/01%20SphericalCoordinates/Latitude_and_Longitude.html
type LatitudeLongitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Angle up from the equator (latitudes to the south are negative), in degrees
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Angle from the prime merdian, measured to the east (longitudes to the west are negative), in degrees
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LatitudeLongitude) Reset() {
	*x = LatitudeLongitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatitudeLongitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatitudeLongitude) ProtoMessage() {}

func (x *LatitudeLongitude) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatitudeLongitude.ProtoReflect.Descriptor instead.
func (*LatitudeLongitude) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{0}
}

func (x *LatitudeLongitude) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatitudeLongitude) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// A circle defined by the radius around a geographical point
type BoundingCircle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Centroid *LatitudeLongitude `protobuf:"bytes,1,opt,name=centroid,proto3" json:"centroid,omitempty"`
	// Radius of the circle in meters
	Radius float64 `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *BoundingCircle) Reset() {
	*x = BoundingCircle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingCircle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingCircle) ProtoMessage() {}

func (x *BoundingCircle) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingCircle.ProtoReflect.Descriptor instead.
func (*BoundingCircle) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{1}
}

func (x *BoundingCircle) GetCentroid() *LatitudeLongitude {
	if x != nil {
		return x.Centroid
	}
	return nil
}

func (x *BoundingCircle) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// The profile used when recording a sessions
type RecordingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RecordingProfile) Reset() {
	*x = RecordingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingProfile) ProtoMessage() {}

func (x *RecordingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingProfile.ProtoReflect.Descriptor instead.
func (*RecordingProfile) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{2}
}

func (x *RecordingProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordingProfile) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Session related metadata, used by both data-plane and control plane.
type SessionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique install ID generated by the OS.
	InstallId string                   `protobuf:"bytes,1,opt,name=install_id,json=installId,proto3" json:"install_id,omitempty"`
	Platform  SessionMetadata_Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=v2.dataplane.SessionMetadata_Platform" json:"platform,omitempty"`
	// E.g Apple or Samsung
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// iPhone13,4 OR Pixel 3a
	Model string `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	// 14.4 (iOS) / 11 (Android)
	SystemVersion string `protobuf:"bytes,6,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	// false for simulators
	IsDevicePhysical bool              `protobuf:"varint,7,opt,name=is_device_physical,json=isDevicePhysical,proto3" json:"is_device_physical,omitempty"`
	RecordingProfile *RecordingProfile `protobuf:"bytes,8,opt,name=recording_profile,json=recordingProfile,proto3" json:"recording_profile,omitempty"`
	// Width and height for the device - physical and logical.
	//
	// Deprecated: Do not use.
	DevicePhysicalWidth int64 `protobuf:"varint,9,opt,name=device_physical_width,json=devicePhysicalWidth,proto3" json:"device_physical_width,omitempty"`
	// Deprecated: Do not use.
	DevicePhysicalHeight int64 `protobuf:"varint,10,opt,name=device_physical_height,json=devicePhysicalHeight,proto3" json:"device_physical_height,omitempty"`
	// Deprecated: Do not use.
	DeviceLogicalWidth int64 `protobuf:"varint,11,opt,name=device_logical_width,json=deviceLogicalWidth,proto3" json:"device_logical_width,omitempty"`
	// Deprecated: Do not use.
	DeviceLogicalHeight int64 `protobuf:"varint,12,opt,name=device_logical_height,json=deviceLogicalHeight,proto3" json:"device_logical_height,omitempty"`
	// The number of device pixels for each logical pixel for the screen this view is displayed on.
	//
	// Deprecated: Do not use.
	DevicePixelRatio float64 `protobuf:"fixed64,13,opt,name=device_pixel_ratio,json=devicePixelRatio,proto3" json:"device_pixel_ratio,omitempty"`
	// The version of the Moonsense SDK that was used to create the Session.
	// This is represented as <major>.<minor>.<patch> (for eg. 1.0.3).
	ReleaseVersion string `protobuf:"bytes,14,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"`
}

func (x *SessionMetadata) Reset() {
	*x = SessionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMetadata) ProtoMessage() {}

func (x *SessionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMetadata.ProtoReflect.Descriptor instead.
func (*SessionMetadata) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{3}
}

func (x *SessionMetadata) GetInstallId() string {
	if x != nil {
		return x.InstallId
	}
	return ""
}

func (x *SessionMetadata) GetPlatform() SessionMetadata_Platform {
	if x != nil {
		return x.Platform
	}
	return SessionMetadata_UNKNOWN
}

func (x *SessionMetadata) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *SessionMetadata) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SessionMetadata) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *SessionMetadata) GetIsDevicePhysical() bool {
	if x != nil {
		return x.IsDevicePhysical
	}
	return false
}

func (x *SessionMetadata) GetRecordingProfile() *RecordingProfile {
	if x != nil {
		return x.RecordingProfile
	}
	return nil
}

// Deprecated: Do not use.
func (x *SessionMetadata) GetDevicePhysicalWidth() int64 {
	if x != nil {
		return x.DevicePhysicalWidth
	}
	return 0
}

// Deprecated: Do not use.
func (x *SessionMetadata) GetDevicePhysicalHeight() int64 {
	if x != nil {
		return x.DevicePhysicalHeight
	}
	return 0
}

// Deprecated: Do not use.
func (x *SessionMetadata) GetDeviceLogicalWidth() int64 {
	if x != nil {
		return x.DeviceLogicalWidth
	}
	return 0
}

// Deprecated: Do not use.
func (x *SessionMetadata) GetDeviceLogicalHeight() int64 {
	if x != nil {
		return x.DeviceLogicalHeight
	}
	return 0
}

// Deprecated: Do not use.
func (x *SessionMetadata) GetDevicePixelRatio() float64 {
	if x != nil {
		return x.DevicePixelRatio
	}
	return 0
}

func (x *SessionMetadata) GetReleaseVersion() string {
	if x != nil {
		return x.ReleaseVersion
	}
	return ""
}

// Session configuration information.
//
// Tracks settings used to setup the session such as session duration,
// which sensors to use, etc...
type SessionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration, in millis, passed in the session start request specifying the
	// max amount of time a session should record.
	RequestedDurationMillis int64 `protobuf:"varint,1,opt,name=requested_duration_millis,json=requestedDurationMillis,proto3" json:"requested_duration_millis,omitempty"`
	// A flag that specifies whether or not text masking is enabled.
	MaskText bool `protobuf:"varint,2,opt,name=mask_text,json=maskText,proto3" json:"mask_text,omitempty"`
	// The sampling rate, in hertz, used by the SDK for sensors that support
	// it such as the Accelerometer. E.g., a value of 20 means the SDK will try to sample
	// data 20 times per second.
	SensorSamplingRate int32 `protobuf:"varint,3,opt,name=sensor_sampling_rate,json=sensorSamplingRate,proto3" json:"sensor_sampling_rate,omitempty"`
	// The interval, in milliseconds, at which a bundle is generated from the accumulated data for the session
	// and then made available to an extension such as the Network Module.
	// The actual rate seen is subject to data availability, network availability, etc...
	BundleGenerationIntervalMillis int32 `protobuf:"varint,4,opt,name=bundle_generation_interval_millis,json=bundleGenerationIntervalMillis,proto3" json:"bundle_generation_interval_millis,omitempty"`
	// A list of sensors the Session was requested to record.
	// *NOTE*: Requesting the sensor does not mean that the sensor will be recorded.
	// Sensor availability is subject to platform and device capabilities as well
	// as permissions given to the implementing application.
	RequestedSensors []common.SensorType `protobuf:"varint,5,rep,packed,name=requested_sensors,json=requestedSensors,proto3,enum=v2.common.SensorType" json:"requested_sensors,omitempty"`
}

func (x *SessionConfig) Reset() {
	*x = SessionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfig) ProtoMessage() {}

func (x *SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfig.ProtoReflect.Descriptor instead.
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{4}
}

func (x *SessionConfig) GetRequestedDurationMillis() int64 {
	if x != nil {
		return x.RequestedDurationMillis
	}
	return 0
}

func (x *SessionConfig) GetMaskText() bool {
	if x != nil {
		return x.MaskText
	}
	return false
}

func (x *SessionConfig) GetSensorSamplingRate() int32 {
	if x != nil {
		return x.SensorSamplingRate
	}
	return 0
}

func (x *SessionConfig) GetBundleGenerationIntervalMillis() int32 {
	if x != nil {
		return x.BundleGenerationIntervalMillis
	}
	return 0
}

func (x *SessionConfig) GetRequestedSensors() []common.SensorType {
	if x != nil {
		return x.RequestedSensors
	}
	return nil
}

// A label that can be applied to sessions
type SessionLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelId        string                 `protobuf:"bytes,1,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	SessionLabelId string                 `protobuf:"bytes,2,opt,name=session_label_id,json=sessionLabelId,proto3" json:"session_label_id,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *SessionLabel) Reset() {
	*x = SessionLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLabel) ProtoMessage() {}

func (x *SessionLabel) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLabel.ProtoReflect.Descriptor instead.
func (*SessionLabel) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{5}
}

func (x *SessionLabel) GetLabelId() string {
	if x != nil {
		return x.LabelId
	}
	return ""
}

func (x *SessionLabel) GetSessionLabelId() string {
	if x != nil {
		return x.SessionLabelId
	}
	return ""
}

func (x *SessionLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionLabel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Generic messages for statistics
type BucketedCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*BucketedCounter_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Total   int32                     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BucketedCounter) Reset() {
	*x = BucketedCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketedCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketedCounter) ProtoMessage() {}

func (x *BucketedCounter) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketedCounter.ProtoReflect.Descriptor instead.
func (*BucketedCounter) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{6}
}

func (x *BucketedCounter) GetBuckets() []*BucketedCounter_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *BucketedCounter) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Cummulative Distribution Function
// See: https://en.wikipedia.org/wiki/Cumulative_distribution_function
//
// Each element in the value array represents a specific quantile. If the
// array has 100 elements the value at the index 0 is min, the value at
// index 25 is p25 and so on.
type CDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *CDF) Reset() {
	*x = CDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDF) ProtoMessage() {}

func (x *CDF) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDF.ProtoReflect.Descriptor instead.
func (*CDF) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{7}
}

func (x *CDF) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Information about a captured session.
// Includes details on when information was captured,
// where it was captured (if captured), summary of the
// sensor data captured, and what labels have been
// applied
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AppId       string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OldestEvent *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=oldest_event,json=oldestEvent,proto3" json:"oldest_event,omitempty"`
	NewestEvent *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=newest_event,json=newestEvent,proto3" json:"newest_event,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Circle      *BoundingCircle        `protobuf:"bytes,6,opt,name=circle,proto3" json:"circle,omitempty"`
	// Information regarding the session
	Metadata *SessionMetadata            `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"` // Required on Session creation
	Counters map[string]*BucketedCounter `protobuf:"bytes,8,rep,name=counters,proto3" json:"counters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels   []*SessionLabel             `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"` // Optional on Session creation
	Cdfs     map[string]*CDF             `protobuf:"bytes,10,rep,name=cdfs,proto3" json:"cdfs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RegionId string                      `protobuf:"bytes,11,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// An optional client defined group identifier used to link multiple sessions
	// together. It can be used as a filter to retrieve a list of sessions.
	// Must not include PII and should be less than or equal to 64 characters in length.
	//
	// Deprecated: Do not use.
	ClientSessionGroupId string         `protobuf:"bytes,12,opt,name=client_session_group_id,json=clientSessionGroupId,proto3" json:"client_session_group_id,omitempty"`
	Config               *SessionConfig `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	// An optional client defined identifier used to link multiple sessions
	// together. It can be used as a filter to retrieve a list of sessions.
	// Must not include PII and should be less than or equal to 64 characters in length.
	JourneyId string `protobuf:"bytes,14,opt,name=journey_id,json=journeyId,proto3" json:"journey_id,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{8}
}

func (x *Session) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Session) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Session) GetOldestEvent() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestEvent
	}
	return nil
}

func (x *Session) GetNewestEvent() *timestamppb.Timestamp {
	if x != nil {
		return x.NewestEvent
	}
	return nil
}

func (x *Session) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Session) GetCircle() *BoundingCircle {
	if x != nil {
		return x.Circle
	}
	return nil
}

func (x *Session) GetMetadata() *SessionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Session) GetCounters() map[string]*BucketedCounter {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Session) GetLabels() []*SessionLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Session) GetCdfs() map[string]*CDF {
	if x != nil {
		return x.Cdfs
	}
	return nil
}

func (x *Session) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// Deprecated: Do not use.
func (x *Session) GetClientSessionGroupId() string {
	if x != nil {
		return x.ClientSessionGroupId
	}
	return ""
}

func (x *Session) GetConfig() *SessionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Session) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

// Insert or Update Session Labels API
// Request for POST "/apps/:app_id/sessions/:id/labels"
type SessionLabelCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*SessionLabel `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *SessionLabelCreateRequest) Reset() {
	*x = SessionLabelCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLabelCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLabelCreateRequest) ProtoMessage() {}

func (x *SessionLabelCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLabelCreateRequest.ProtoReflect.Descriptor instead.
func (*SessionLabelCreateRequest) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{9}
}

func (x *SessionLabelCreateRequest) GetLabels() []*SessionLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Response for POST "/apps/:app_id/sessions/:id/labels"
type SessionLabelCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionLabelCreateResponse) Reset() {
	*x = SessionLabelCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLabelCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLabelCreateResponse) ProtoMessage() {}

func (x *SessionLabelCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLabelCreateResponse.ProtoReflect.Descriptor instead.
func (*SessionLabelCreateResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{10}
}

// The response the data plane sends when it
// receives a network packet request
type NetworkPacketCaptureClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *NetworkPacketCaptureClientResponse) Reset() {
	*x = NetworkPacketCaptureClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPacketCaptureClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPacketCaptureClientResponse) ProtoMessage() {}

func (x *NetworkPacketCaptureClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPacketCaptureClientResponse.ProtoReflect.Descriptor instead.
func (*NetworkPacketCaptureClientResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkPacketCaptureClientResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type BundleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Bundles   []*bundle.Bundle `protobuf:"bytes,2,rep,name=bundles,proto3" json:"bundles,omitempty"`
	// Unique install ID generated by the OS.
	InstallId string `protobuf:"bytes,3,opt,name=install_id,json=installId,proto3" json:"install_id,omitempty"`
	// User is provided by the client as it becomes available (e.g after customer authenticates an user).
	ClientUserId string `protobuf:"bytes,4,opt,name=client_user_id,json=clientUserId,proto3" json:"client_user_id,omitempty"`
}

func (x *BundleCreateRequest) Reset() {
	*x = BundleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleCreateRequest) ProtoMessage() {}

func (x *BundleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleCreateRequest.ProtoReflect.Descriptor instead.
func (*BundleCreateRequest) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{12}
}

func (x *BundleCreateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BundleCreateRequest) GetBundles() []*bundle.Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *BundleCreateRequest) GetInstallId() string {
	if x != nil {
		return x.InstallId
	}
	return ""
}

func (x *BundleCreateRequest) GetClientUserId() string {
	if x != nil {
		return x.ClientUserId
	}
	return ""
}

type BundleCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCount   int32 `protobuf:"varint,1,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	SuccessCount int32 `protobuf:"varint,2,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
}

func (x *BundleCreateResponse) Reset() {
	*x = BundleCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleCreateResponse) ProtoMessage() {}

func (x *BundleCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleCreateResponse.ProtoReflect.Descriptor instead.
func (*BundleCreateResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{13}
}

func (x *BundleCreateResponse) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *BundleCreateResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

type BucketedCounter_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start of a bucket in milliseconds since epoch.
	StartTime int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Value     int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BucketedCounter_Bucket) Reset() {
	*x = BucketedCounter_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_sdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketedCounter_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketedCounter_Bucket) ProtoMessage() {}

func (x *BucketedCounter_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_sdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketedCounter_Bucket.ProtoReflect.Descriptor instead.
func (*BucketedCounter_Bucket) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_sdk_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BucketedCounter_Bucket) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BucketedCounter_Bucket) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_data_plane_v2_sdk_proto protoreflect.FileDescriptor

var file_data_plane_v2_sdk_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x76, 0x32, 0x5f,
	0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x11, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0x65, 0x0a, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x05, 0x0a, 0x0f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x38, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x36, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x69, 0x78, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x69, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x03, 0x22, 0xa9, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61,
	0x73, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a,
	0x3d, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1d,
	0x0a, 0x03, 0x43, 0x44, 0x46, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe7, 0x06,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x06, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x64, 0x66, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x64, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63,
	0x64, 0x66, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x1a,
	0x5a, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x09, 0x43,
	0x64, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x43, 0x44, 0x46, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x22, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x14, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x66, 0x0a, 0x24, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42, 0x14, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x53, 0x44, 0x4b, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a,
	0x28, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_data_plane_v2_sdk_proto_rawDescOnce sync.Once
	file_data_plane_v2_sdk_proto_rawDescData = file_data_plane_v2_sdk_proto_rawDesc
)

func file_data_plane_v2_sdk_proto_rawDescGZIP() []byte {
	file_data_plane_v2_sdk_proto_rawDescOnce.Do(func() {
		file_data_plane_v2_sdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_plane_v2_sdk_proto_rawDescData)
	})
	return file_data_plane_v2_sdk_proto_rawDescData
}

var file_data_plane_v2_sdk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_data_plane_v2_sdk_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_data_plane_v2_sdk_proto_goTypes = []interface{}{
	(SessionMetadata_Platform)(0),              // 0: v2.dataplane.SessionMetadata.Platform
	(*LatitudeLongitude)(nil),                  // 1: v2.dataplane.LatitudeLongitude
	(*BoundingCircle)(nil),                     // 2: v2.dataplane.BoundingCircle
	(*RecordingProfile)(nil),                   // 3: v2.dataplane.RecordingProfile
	(*SessionMetadata)(nil),                    // 4: v2.dataplane.SessionMetadata
	(*SessionConfig)(nil),                      // 5: v2.dataplane.SessionConfig
	(*SessionLabel)(nil),                       // 6: v2.dataplane.SessionLabel
	(*BucketedCounter)(nil),                    // 7: v2.dataplane.BucketedCounter
	(*CDF)(nil),                                // 8: v2.dataplane.CDF
	(*Session)(nil),                            // 9: v2.dataplane.Session
	(*SessionLabelCreateRequest)(nil),          // 10: v2.dataplane.SessionLabelCreateRequest
	(*SessionLabelCreateResponse)(nil),         // 11: v2.dataplane.SessionLabelCreateResponse
	(*NetworkPacketCaptureClientResponse)(nil), // 12: v2.dataplane.NetworkPacketCaptureClientResponse
	(*BundleCreateRequest)(nil),                // 13: v2.dataplane.BundleCreateRequest
	(*BundleCreateResponse)(nil),               // 14: v2.dataplane.BundleCreateResponse
	(*BucketedCounter_Bucket)(nil),             // 15: v2.dataplane.BucketedCounter.Bucket
	nil,                                        // 16: v2.dataplane.Session.CountersEntry
	nil,                                        // 17: v2.dataplane.Session.CdfsEntry
	(common.SensorType)(0),                     // 18: v2.common.SensorType
	(*timestamppb.Timestamp)(nil),              // 19: google.protobuf.Timestamp
	(*bundle.Bundle)(nil),                      // 20: v2.bundle.Bundle
}
var file_data_plane_v2_sdk_proto_depIdxs = []int32{
	1,  // 0: v2.dataplane.BoundingCircle.centroid:type_name -> v2.dataplane.LatitudeLongitude
	0,  // 1: v2.dataplane.SessionMetadata.platform:type_name -> v2.dataplane.SessionMetadata.Platform
	3,  // 2: v2.dataplane.SessionMetadata.recording_profile:type_name -> v2.dataplane.RecordingProfile
	18, // 3: v2.dataplane.SessionConfig.requested_sensors:type_name -> v2.common.SensorType
	19, // 4: v2.dataplane.SessionLabel.created_at:type_name -> google.protobuf.Timestamp
	15, // 5: v2.dataplane.BucketedCounter.buckets:type_name -> v2.dataplane.BucketedCounter.Bucket
	19, // 6: v2.dataplane.Session.oldest_event:type_name -> google.protobuf.Timestamp
	19, // 7: v2.dataplane.Session.newest_event:type_name -> google.protobuf.Timestamp
	19, // 8: v2.dataplane.Session.created_at:type_name -> google.protobuf.Timestamp
	2,  // 9: v2.dataplane.Session.circle:type_name -> v2.dataplane.BoundingCircle
	4,  // 10: v2.dataplane.Session.metadata:type_name -> v2.dataplane.SessionMetadata
	16, // 11: v2.dataplane.Session.counters:type_name -> v2.dataplane.Session.CountersEntry
	6,  // 12: v2.dataplane.Session.labels:type_name -> v2.dataplane.SessionLabel
	17, // 13: v2.dataplane.Session.cdfs:type_name -> v2.dataplane.Session.CdfsEntry
	5,  // 14: v2.dataplane.Session.config:type_name -> v2.dataplane.SessionConfig
	6,  // 15: v2.dataplane.SessionLabelCreateRequest.labels:type_name -> v2.dataplane.SessionLabel
	20, // 16: v2.dataplane.BundleCreateRequest.bundles:type_name -> v2.bundle.Bundle
	7,  // 17: v2.dataplane.Session.CountersEntry.value:type_name -> v2.dataplane.BucketedCounter
	8,  // 18: v2.dataplane.Session.CdfsEntry.value:type_name -> v2.dataplane.CDF
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_data_plane_v2_sdk_proto_init() }
func file_data_plane_v2_sdk_proto_init() {
	if File_data_plane_v2_sdk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_plane_v2_sdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatitudeLongitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingCircle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketedCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLabelCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLabelCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPacketCaptureClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_sdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketedCounter_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_plane_v2_sdk_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_plane_v2_sdk_proto_goTypes,
		DependencyIndexes: file_data_plane_v2_sdk_proto_depIdxs,
		EnumInfos:         file_data_plane_v2_sdk_proto_enumTypes,
		MessageInfos:      file_data_plane_v2_sdk_proto_msgTypes,
	}.Build()
	File_data_plane_v2_sdk_proto = out.File
	file_data_plane_v2_sdk_proto_rawDesc = nil
	file_data_plane_v2_sdk_proto_goTypes = nil
	file_data_plane_v2_sdk_proto_depIdxs = nil
}
