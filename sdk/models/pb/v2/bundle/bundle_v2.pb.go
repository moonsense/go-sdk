// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: bundle_v2.proto

package bundle

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "moonsense.io/sdk/models/pb/v2/common"
	feature "moonsense.io/sdk/models/pb/v2/feature"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Battery_State int32

const (
	Battery_UNKNOWN     Battery_State = 0
	Battery_CHARGING    Battery_State = 1
	Battery_DISCHARGING Battery_State = 2
	Battery_FULL        Battery_State = 3
)

// Enum value maps for Battery_State.
var (
	Battery_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "CHARGING",
		2: "DISCHARGING",
		3: "FULL",
	}
	Battery_State_value = map[string]int32{
		"UNKNOWN":     0,
		"CHARGING":    1,
		"DISCHARGING": 2,
		"FULL":        3,
	}
)

func (x Battery_State) Enum() *Battery_State {
	p := new(Battery_State)
	*p = x
	return p
}

func (x Battery_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Battery_State) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[0].Descriptor()
}

func (Battery_State) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[0]
}

func (x Battery_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Battery_State.Descriptor instead.
func (Battery_State) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{4, 0}
}

type Pointer_Type int32

const (
	Pointer_UNKNOWN         Pointer_Type = 0
	Pointer_STYLUS          Pointer_Type = 1
	Pointer_INVERTED_STYLUS Pointer_Type = 2
	Pointer_TOUCH           Pointer_Type = 3
	Pointer_MOUSE           Pointer_Type = 4
)

// Enum value maps for Pointer_Type.
var (
	Pointer_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "STYLUS",
		2: "INVERTED_STYLUS",
		3: "TOUCH",
		4: "MOUSE",
	}
	Pointer_Type_value = map[string]int32{
		"UNKNOWN":         0,
		"STYLUS":          1,
		"INVERTED_STYLUS": 2,
		"TOUCH":           3,
		"MOUSE":           4,
	}
)

func (x Pointer_Type) Enum() *Pointer_Type {
	p := new(Pointer_Type)
	*p = x
	return p
}

func (x Pointer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pointer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[1].Descriptor()
}

func (Pointer_Type) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[1]
}

func (x Pointer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pointer_Type.Descriptor instead.
func (Pointer_Type) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{11, 0}
}

// A status of the pointer with respect to the monitored Viewport boundaries.
type Pointer_ViewportBoundaryStatus int32

const (
	// The status of the pointer within the viewport is unknown
	Pointer_UNKNOWN_VIEWPORT_BOUNDARY_STATUS Pointer_ViewportBoundaryStatus = 0
	// The pointer has entered the viewport boundaries
	Pointer_ENTER_VIEWPORT Pointer_ViewportBoundaryStatus = 1
	// The pointer is within the viewport boundaries
	Pointer_IN_VIEWPORT Pointer_ViewportBoundaryStatus = 2
	// The pointer has left the viewport boundaries
	Pointer_LEAVE_VIEWPORT Pointer_ViewportBoundaryStatus = 3
)

// Enum value maps for Pointer_ViewportBoundaryStatus.
var (
	Pointer_ViewportBoundaryStatus_name = map[int32]string{
		0: "UNKNOWN_VIEWPORT_BOUNDARY_STATUS",
		1: "ENTER_VIEWPORT",
		2: "IN_VIEWPORT",
		3: "LEAVE_VIEWPORT",
	}
	Pointer_ViewportBoundaryStatus_value = map[string]int32{
		"UNKNOWN_VIEWPORT_BOUNDARY_STATUS": 0,
		"ENTER_VIEWPORT":                   1,
		"IN_VIEWPORT":                      2,
		"LEAVE_VIEWPORT":                   3,
	}
)

func (x Pointer_ViewportBoundaryStatus) Enum() *Pointer_ViewportBoundaryStatus {
	p := new(Pointer_ViewportBoundaryStatus)
	*p = x
	return p
}

func (x Pointer_ViewportBoundaryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pointer_ViewportBoundaryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[2].Descriptor()
}

func (Pointer_ViewportBoundaryStatus) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[2]
}

func (x Pointer_ViewportBoundaryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pointer_ViewportBoundaryStatus.Descriptor instead.
func (Pointer_ViewportBoundaryStatus) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{11, 1}
}

type TextChange_Action int32

const (
	TextChange_UNKNOWN TextChange_Action = 0 // Encompasses all the other types of text change events
	// including typing, swipe, autofill, autocomplete. Essentially
	// anything that is not cut or paste.
	TextChange_CUT   TextChange_Action = 1
	TextChange_PASTE TextChange_Action = 2
)

// Enum value maps for TextChange_Action.
var (
	TextChange_Action_name = map[int32]string{
		0: "UNKNOWN",
		1: "CUT",
		2: "PASTE",
	}
	TextChange_Action_value = map[string]int32{
		"UNKNOWN": 0,
		"CUT":     1,
		"PASTE":   2,
	}
)

func (x TextChange_Action) Enum() *TextChange_Action {
	p := new(TextChange_Action)
	*p = x
	return p
}

func (x TextChange_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextChange_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[3].Descriptor()
}

func (TextChange_Action) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[3]
}

func (x TextChange_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextChange_Action.Descriptor instead.
func (TextChange_Action) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{14, 0}
}

type InputChange_Action int32

const (
	InputChange_UNKNOWN InputChange_Action = 0 // Encompasses all the other types of text change events
	// including typing, swipe, autofill, autocomplete. Essentially
	// anything that is not cut or paste.
	InputChange_CUT   InputChange_Action = 1
	InputChange_PASTE InputChange_Action = 2
)

// Enum value maps for InputChange_Action.
var (
	InputChange_Action_name = map[int32]string{
		0: "UNKNOWN",
		1: "CUT",
		2: "PASTE",
	}
	InputChange_Action_value = map[string]int32{
		"UNKNOWN": 0,
		"CUT":     1,
		"PASTE":   2,
	}
)

func (x InputChange_Action) Enum() *InputChange_Action {
	p := new(InputChange_Action)
	*p = x
	return p
}

func (x InputChange_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputChange_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[4].Descriptor()
}

func (InputChange_Action) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[4]
}

func (x InputChange_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputChange_Action.Descriptor instead.
func (InputChange_Action) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{15, 0}
}

type KeyPress_Type int32

const (
	KeyPress_UNKNOWN  KeyPress_Type = 0
	KeyPress_KEY_UP   KeyPress_Type = 1
	KeyPress_KEY_DOWN KeyPress_Type = 2
)

// Enum value maps for KeyPress_Type.
var (
	KeyPress_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "KEY_UP",
		2: "KEY_DOWN",
	}
	KeyPress_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"KEY_UP":   1,
		"KEY_DOWN": 2,
	}
)

func (x KeyPress_Type) Enum() *KeyPress_Type {
	p := new(KeyPress_Type)
	*p = x
	return p
}

func (x KeyPress_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyPress_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[5].Descriptor()
}

func (KeyPress_Type) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[5]
}

func (x KeyPress_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyPress_Type.Descriptor instead.
func (KeyPress_Type) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{16, 0}
}

type FocusChange_Type int32

const (
	FocusChange_UNKNOWN      FocusChange_Type = 0
	FocusChange_FOCUS_GAINED FocusChange_Type = 1
	FocusChange_FOCUS_LOST   FocusChange_Type = 2
)

// Enum value maps for FocusChange_Type.
var (
	FocusChange_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "FOCUS_GAINED",
		2: "FOCUS_LOST",
	}
	FocusChange_Type_value = map[string]int32{
		"UNKNOWN":      0,
		"FOCUS_GAINED": 1,
		"FOCUS_LOST":   2,
	}
)

func (x FocusChange_Type) Enum() *FocusChange_Type {
	p := new(FocusChange_Type)
	*p = x
	return p
}

func (x FocusChange_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FocusChange_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[6].Descriptor()
}

func (FocusChange_Type) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[6]
}

func (x FocusChange_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FocusChange_Type.Descriptor instead.
func (FocusChange_Type) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{17, 0}
}

type MouseWheel_WheelMode int32

const (
	MouseWheel_UNKNOWN_WHEEL_MODE MouseWheel_WheelMode = 0
	// The default mode for mouse wheel tracking. This mode means
	// the mouse wheel event reported by the system was output in pixels.
	MouseWheel_PIXEL MouseWheel_WheelMode = 1
	// A mode in which mouse wheel events are output as lines to be scrolled.
	// The raw values when this mode is used are output as `wheel_delta_y_line` and
	// `wheel_delta_x_line`.
	MouseWheel_LINE MouseWheel_WheelMode = 2
	// A mode in which mouse wheel events are output as pages to be scrolled.
	// This setting only appears on the Windows operating system and must be
	// turned on for this mode to appear.
	// The raw values when this mode is used are output as `wheel_delta_y_page` and
	// `wheel_delta_x_page`.
	MouseWheel_PAGE MouseWheel_WheelMode = 3
)

// Enum value maps for MouseWheel_WheelMode.
var (
	MouseWheel_WheelMode_name = map[int32]string{
		0: "UNKNOWN_WHEEL_MODE",
		1: "PIXEL",
		2: "LINE",
		3: "PAGE",
	}
	MouseWheel_WheelMode_value = map[string]int32{
		"UNKNOWN_WHEEL_MODE": 0,
		"PIXEL":              1,
		"LINE":               2,
		"PAGE":               3,
	}
)

func (x MouseWheel_WheelMode) Enum() *MouseWheel_WheelMode {
	p := new(MouseWheel_WheelMode)
	*p = x
	return p
}

func (x MouseWheel_WheelMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MouseWheel_WheelMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[7].Descriptor()
}

func (MouseWheel_WheelMode) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[7]
}

func (x MouseWheel_WheelMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MouseWheel_WheelMode.Descriptor instead.
func (MouseWheel_WheelMode) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{19, 0}
}

// The Permission Status for a given sensor
// dictated by what Permissions have been
// granted by the user
type PermissionEvent_PermissionStatus int32

const (
	PermissionEvent_UNKNOWN_PERMISSION_STATUS PermissionEvent_PermissionStatus = 0
	// User has given permission
	PermissionEvent_ALLOWED PermissionEvent_PermissionStatus = 1
	// User has denied permission
	PermissionEvent_DENIED PermissionEvent_PermissionStatus = 2
	// User has not yet given or denied permission.
	// This means the user would need to be prompted
	// for permission before the sensor would be able to
	// be used.
	//
	// Data will not be collected.
	PermissionEvent_UNDETERMINED_BY_USER PermissionEvent_PermissionStatus = 3
	// Checking the status of the permission would trigger
	// a user prompt and cannot be determined another way.
	//
	// This is currently only used for Safari by the Web SDK.
	// Data will attempt to be collected but is not guaranteed.
	PermissionEvent_REQUIRES_PROMPT_TO_DETERMINE PermissionEvent_PermissionStatus = 4
	// The application has permission to use the sensor
	// but the sensor is currently unavailable. This is
	// typically due to the sensor not existing on the
	// device when using the Web SDK.
	PermissionEvent_SENSOR_NOT_AVAILABLE PermissionEvent_PermissionStatus = 5
)

// Enum value maps for PermissionEvent_PermissionStatus.
var (
	PermissionEvent_PermissionStatus_name = map[int32]string{
		0: "UNKNOWN_PERMISSION_STATUS",
		1: "ALLOWED",
		2: "DENIED",
		3: "UNDETERMINED_BY_USER",
		4: "REQUIRES_PROMPT_TO_DETERMINE",
		5: "SENSOR_NOT_AVAILABLE",
	}
	PermissionEvent_PermissionStatus_value = map[string]int32{
		"UNKNOWN_PERMISSION_STATUS":    0,
		"ALLOWED":                      1,
		"DENIED":                       2,
		"UNDETERMINED_BY_USER":         3,
		"REQUIRES_PROMPT_TO_DETERMINE": 4,
		"SENSOR_NOT_AVAILABLE":         5,
	}
)

func (x PermissionEvent_PermissionStatus) Enum() *PermissionEvent_PermissionStatus {
	p := new(PermissionEvent_PermissionStatus)
	*p = x
	return p
}

func (x PermissionEvent_PermissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionEvent_PermissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[8].Descriptor()
}

func (PermissionEvent_PermissionStatus) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[8]
}

func (x PermissionEvent_PermissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionEvent_PermissionStatus.Descriptor instead.
func (PermissionEvent_PermissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{20, 0}
}

//*
// The orientation of the viewport on the device. This may or may not align with
// the orientation reported by Orientation depending on whether the user has
// rotation lock enabled on their device.
type ViewportSizeEvent_ViewportOrientationDirection int32

const (
	ViewportSizeEvent_UNKNOWN_ORIENTATION_DIRECTION ViewportSizeEvent_ViewportOrientationDirection = 0
	ViewportSizeEvent_PORTRAIT_PRIMARY              ViewportSizeEvent_ViewportOrientationDirection = 1
	ViewportSizeEvent_PORTRAIT_SECONDARY            ViewportSizeEvent_ViewportOrientationDirection = 2
	ViewportSizeEvent_LANDSCAPE_PRIMARY             ViewportSizeEvent_ViewportOrientationDirection = 3
	ViewportSizeEvent_LANDSCAPE_SECONDARY           ViewportSizeEvent_ViewportOrientationDirection = 4
)

// Enum value maps for ViewportSizeEvent_ViewportOrientationDirection.
var (
	ViewportSizeEvent_ViewportOrientationDirection_name = map[int32]string{
		0: "UNKNOWN_ORIENTATION_DIRECTION",
		1: "PORTRAIT_PRIMARY",
		2: "PORTRAIT_SECONDARY",
		3: "LANDSCAPE_PRIMARY",
		4: "LANDSCAPE_SECONDARY",
	}
	ViewportSizeEvent_ViewportOrientationDirection_value = map[string]int32{
		"UNKNOWN_ORIENTATION_DIRECTION": 0,
		"PORTRAIT_PRIMARY":              1,
		"PORTRAIT_SECONDARY":            2,
		"LANDSCAPE_PRIMARY":             3,
		"LANDSCAPE_SECONDARY":           4,
	}
)

func (x ViewportSizeEvent_ViewportOrientationDirection) Enum() *ViewportSizeEvent_ViewportOrientationDirection {
	p := new(ViewportSizeEvent_ViewportOrientationDirection)
	*p = x
	return p
}

func (x ViewportSizeEvent_ViewportOrientationDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewportSizeEvent_ViewportOrientationDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[9].Descriptor()
}

func (ViewportSizeEvent_ViewportOrientationDirection) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[9]
}

func (x ViewportSizeEvent_ViewportOrientationDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewportSizeEvent_ViewportOrientationDirection.Descriptor instead.
func (ViewportSizeEvent_ViewportOrientationDirection) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{21, 0}
}

// The Application status dictated by
// the users ability to interact with
// the application
type AppLifeCycleEvent_AppLifeCycleStatus int32

const (
	// The application life cycle status cannot be determined
	AppLifeCycleEvent_UNKNOWN_APP_LIFE_CYCLE_STATUS AppLifeCycleEvent_AppLifeCycleStatus = 0
	// The application has been brought into the
	// foreground and can be interacted with by
	// the user
	AppLifeCycleEvent_FOREGROUND AppLifeCycleEvent_AppLifeCycleStatus = 1
	// The application has been sent into the
	// background and cannot be interacted with by
	// the user
	AppLifeCycleEvent_BACKGROUND AppLifeCycleEvent_AppLifeCycleStatus = 2
	// The application has been requested to be
	// destroyed
	AppLifeCycleEvent_DESTROY AppLifeCycleEvent_AppLifeCycleStatus = 3
)

// Enum value maps for AppLifeCycleEvent_AppLifeCycleStatus.
var (
	AppLifeCycleEvent_AppLifeCycleStatus_name = map[int32]string{
		0: "UNKNOWN_APP_LIFE_CYCLE_STATUS",
		1: "FOREGROUND",
		2: "BACKGROUND",
		3: "DESTROY",
	}
	AppLifeCycleEvent_AppLifeCycleStatus_value = map[string]int32{
		"UNKNOWN_APP_LIFE_CYCLE_STATUS": 0,
		"FOREGROUND":                    1,
		"BACKGROUND":                    2,
		"DESTROY":                       3,
	}
)

func (x AppLifeCycleEvent_AppLifeCycleStatus) Enum() *AppLifeCycleEvent_AppLifeCycleStatus {
	p := new(AppLifeCycleEvent_AppLifeCycleStatus)
	*p = x
	return p
}

func (x AppLifeCycleEvent_AppLifeCycleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppLifeCycleEvent_AppLifeCycleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_v2_proto_enumTypes[10].Descriptor()
}

func (AppLifeCycleEvent_AppLifeCycleStatus) Type() protoreflect.EnumType {
	return &file_bundle_v2_proto_enumTypes[10]
}

func (x AppLifeCycleEvent_AppLifeCycleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppLifeCycleEvent_AppLifeCycleStatus.Descriptor instead.
func (AppLifeCycleEvent_AppLifeCycleStatus) EnumDescriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{22, 0}
}

// A SealedBundle is a server-side envelope for a Bundle generated by
// the  client SDK. It is used to append additional server-side state
// extracted from the request to each batch of events captured from the client.
type SealedBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bundle as received in the client request.
	Bundle *Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	// Application ID that was the source of the data.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Credential ID associated with the App.
	CredentialId string `protobuf:"bytes,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Session ID for a specific recording.
	SessionId string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Plaintext User ID extracted from the authentication token.
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The server time in millis when the bundle envelope was constructed.
	ServerTimeMillis int64 `protobuf:"varint,6,opt,name=server_time_millis,json=serverTimeMillis,proto3" json:"server_time_millis,omitempty"`
	// Unique app install ID generated by the OS.
	InstallId string `protobuf:"bytes,7,opt,name=install_id,json=installId,proto3" json:"install_id,omitempty"`
	// The client side user ID (e.g after customer authenticates an user).
	ClientUserId string `protobuf:"bytes,8,opt,name=client_user_id,json=clientUserId,proto3" json:"client_user_id,omitempty"`
	// The client side remote IP as seen when the bundle was ingested.
	RemoteIp string `protobuf:"bytes,9,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	// The journey ID associated with the session.
	JourneyId string `protobuf:"bytes,10,opt,name=journey_id,json=journeyId,proto3" json:"journey_id,omitempty"`
}

func (x *SealedBundle) Reset() {
	*x = SealedBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealedBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealedBundle) ProtoMessage() {}

func (x *SealedBundle) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealedBundle.ProtoReflect.Descriptor instead.
func (*SealedBundle) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{0}
}

func (x *SealedBundle) GetBundle() *Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *SealedBundle) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SealedBundle) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SealedBundle) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SealedBundle) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SealedBundle) GetServerTimeMillis() int64 {
	if x != nil {
		return x.ServerTimeMillis
	}
	return 0
}

func (x *SealedBundle) GetInstallId() string {
	if x != nil {
		return x.InstallId
	}
	return ""
}

func (x *SealedBundle) GetClientUserId() string {
	if x != nil {
		return x.ClientUserId
	}
	return ""
}

func (x *SealedBundle) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *SealedBundle) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

// A Bundle is a collection of data points collected from multiple sensors
// on a mobile devices. All fields are optional and it's  up to the client SDK to
// decide what data to collect and send and at what frequency.
type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Device location as a list of GPS coordinates. Granularity depends on app permissions.
	// Currently only supported through the Web SDK
	LocationData []*Location `protobuf:"bytes,1,rep,name=location_data,json=locationData,proto3" json:"location_data,omitempty"`
	// Device acceleration including the gravity component.
	AccelerometerData []*Accelerometer `protobuf:"bytes,2,rep,name=accelerometer_data,json=accelerometerData,proto3" json:"accelerometer_data,omitempty"`
	//*
	// Magnetic field as perceived by the device.
	MagnetometerData []*Magnetometer `protobuf:"bytes,3,rep,name=magnetometer_data,json=magnetometerData,proto3" json:"magnetometer_data,omitempty"`
	//*
	// Rate of rotation of the device around the three sensor axes.
	GyroscopeData []*Gyroscope `protobuf:"bytes,4,rep,name=gyroscope_data,json=gyroscopeData,proto3" json:"gyroscope_data,omitempty"`
	// Device time when the bundle was constructed.
	ClientTime *Clock `protobuf:"bytes,5,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	// Device battery level and status data.
	Battery *Battery `protobuf:"bytes,6,opt,name=battery,proto3" json:"battery,omitempty"`
	//*
	// Device orientation reported as azimuth, pitch and roll.
	OrientationData []*Orientation `protobuf:"bytes,8,rep,name=orientation_data,json=orientationData,proto3" json:"orientation_data,omitempty"`
	// Pointer movement data as reported by the touchscreen or mouse.
	PointerData []*Pointer `protobuf:"bytes,15,rep,name=pointer_data,json=pointerData,proto3" json:"pointer_data,omitempty"`
	// Device acceleration without the gravity component.
	LinearAccelerometerData []*Accelerometer `protobuf:"bytes,16,rep,name=linear_accelerometer_data,json=linearAccelerometerData,proto3" json:"linear_accelerometer_data,omitempty"`
	// Continuous monotonic increasing index generated by the client.
	Index int32 `protobuf:"varint,18,opt,name=index,proto3" json:"index,omitempty"`
	// Text change events triggered for a target input element.
	//
	// Deprecated: Do not use.
	TextChangeData []*TextChange `protobuf:"bytes,19,rep,name=text_change_data,json=textChangeData,proto3" json:"text_change_data,omitempty"`
	// Key press events captured when available.
	KeyPressData []*KeyPress `protobuf:"bytes,20,rep,name=key_press_data,json=keyPressData,proto3" json:"key_press_data,omitempty"`
	// Loss or gain of focus for a target input element.
	FocusChangeData []*FocusChange `protobuf:"bytes,21,rep,name=focus_change_data,json=focusChangeData,proto3" json:"focus_change_data,omitempty"`
	// Scroll event data when the view is scrolled in any direction
	ViewportScrollData []*ViewportScroll `protobuf:"bytes,22,rep,name=viewport_scroll_data,json=viewportScrollData,proto3" json:"viewport_scroll_data,omitempty"`
	// Mouse Wheel scroll data reported as delta scroll values
	MouseWheelData []*MouseWheel `protobuf:"bytes,23,rep,name=mouse_wheel_data,json=mouseWheelData,proto3" json:"mouse_wheel_data,omitempty"`
	// Permissions that occur during a Session
	PermissionEvents []*PermissionEvent `protobuf:"bytes,24,rep,name=permission_events,json=permissionEvents,proto3" json:"permission_events,omitempty"`
	// Viewport Size changes that occur during a Session
	ViewportSizeEvents []*ViewportSizeEvent `protobuf:"bytes,25,rep,name=viewport_size_events,json=viewportSizeEvents,proto3" json:"viewport_size_events,omitempty"`
	// Changes to the Application Life Cycle that occur during a Session
	AppLifeCycleEvents []*AppLifeCycleEvent `protobuf:"bytes,26,rep,name=app_life_cycle_events,json=appLifeCycleEvents,proto3" json:"app_life_cycle_events,omitempty"`
	// Custom event data added by the implementer of the Moonsense SDK
	CustomEvents []*CustomEvent `protobuf:"bytes,27,rep,name=custom_events,json=customEvents,proto3" json:"custom_events,omitempty"`
	// Tracks click events on form elements
	//
	// Currently only supported through the Web SDK
	ClickData []*Click `protobuf:"bytes,28,rep,name=click_data,json=clickData,proto3" json:"click_data,omitempty"`
	// Set if this is the final bundle generated for this session. When this is
	// true, it is safe to assume that no bundles will be received with an index
	// greater than this one. It is, however, possible that bundles with an index
	// less this this one to be received as ordered delivery of bundle data is not
	// always guaranteed.
	IsFinalBundle bool `protobuf:"varint,29,opt,name=is_final_bundle,json=isFinalBundle,proto3" json:"is_final_bundle,omitempty"`
	// Map from feature_name to Feature
	Features map[string]*feature.Feature `protobuf:"bytes,30,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Input change events triggered for a target input element.
	InputChangeData []*InputChange `protobuf:"bytes,31,rep,name=input_change_data,json=inputChangeData,proto3" json:"input_change_data,omitempty"`
	// Events triggered by a Web Form Submission.
	//
	// This event is only recorded by the Web SDK
	FormSubmitEvents []*FormSubmitEvent `protobuf:"bytes,32,rep,name=form_submit_events,json=formSubmitEvents,proto3" json:"form_submit_events,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{1}
}

func (x *Bundle) GetLocationData() []*Location {
	if x != nil {
		return x.LocationData
	}
	return nil
}

func (x *Bundle) GetAccelerometerData() []*Accelerometer {
	if x != nil {
		return x.AccelerometerData
	}
	return nil
}

func (x *Bundle) GetMagnetometerData() []*Magnetometer {
	if x != nil {
		return x.MagnetometerData
	}
	return nil
}

func (x *Bundle) GetGyroscopeData() []*Gyroscope {
	if x != nil {
		return x.GyroscopeData
	}
	return nil
}

func (x *Bundle) GetClientTime() *Clock {
	if x != nil {
		return x.ClientTime
	}
	return nil
}

func (x *Bundle) GetBattery() *Battery {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *Bundle) GetOrientationData() []*Orientation {
	if x != nil {
		return x.OrientationData
	}
	return nil
}

func (x *Bundle) GetPointerData() []*Pointer {
	if x != nil {
		return x.PointerData
	}
	return nil
}

func (x *Bundle) GetLinearAccelerometerData() []*Accelerometer {
	if x != nil {
		return x.LinearAccelerometerData
	}
	return nil
}

func (x *Bundle) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Deprecated: Do not use.
func (x *Bundle) GetTextChangeData() []*TextChange {
	if x != nil {
		return x.TextChangeData
	}
	return nil
}

func (x *Bundle) GetKeyPressData() []*KeyPress {
	if x != nil {
		return x.KeyPressData
	}
	return nil
}

func (x *Bundle) GetFocusChangeData() []*FocusChange {
	if x != nil {
		return x.FocusChangeData
	}
	return nil
}

func (x *Bundle) GetViewportScrollData() []*ViewportScroll {
	if x != nil {
		return x.ViewportScrollData
	}
	return nil
}

func (x *Bundle) GetMouseWheelData() []*MouseWheel {
	if x != nil {
		return x.MouseWheelData
	}
	return nil
}

func (x *Bundle) GetPermissionEvents() []*PermissionEvent {
	if x != nil {
		return x.PermissionEvents
	}
	return nil
}

func (x *Bundle) GetViewportSizeEvents() []*ViewportSizeEvent {
	if x != nil {
		return x.ViewportSizeEvents
	}
	return nil
}

func (x *Bundle) GetAppLifeCycleEvents() []*AppLifeCycleEvent {
	if x != nil {
		return x.AppLifeCycleEvents
	}
	return nil
}

func (x *Bundle) GetCustomEvents() []*CustomEvent {
	if x != nil {
		return x.CustomEvents
	}
	return nil
}

func (x *Bundle) GetClickData() []*Click {
	if x != nil {
		return x.ClickData
	}
	return nil
}

func (x *Bundle) GetIsFinalBundle() bool {
	if x != nil {
		return x.IsFinalBundle
	}
	return false
}

func (x *Bundle) GetFeatures() map[string]*feature.Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Bundle) GetInputChangeData() []*InputChange {
	if x != nil {
		return x.InputChangeData
	}
	return nil
}

func (x *Bundle) GetFormSubmitEvents() []*FormSubmitEvent {
	if x != nil {
		return x.FormSubmitEvents
	}
	return nil
}

// A 2D floating-point offset that represents a distance in a Cartesian space
// from a separately-maintained origin point.
type Offset2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The X component of the offset.
	Dx float64 `protobuf:"fixed64,1,opt,name=dx,proto3" json:"dx,omitempty"`
	// The Y component of the offset.
	Dy float64 `protobuf:"fixed64,2,opt,name=dy,proto3" json:"dy,omitempty"`
}

func (x *Offset2D) Reset() {
	*x = Offset2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offset2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offset2D) ProtoMessage() {}

func (x *Offset2D) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offset2D.ProtoReflect.Descriptor instead.
func (*Offset2D) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{2}
}

func (x *Offset2D) GetDx() float64 {
	if x != nil {
		return x.Dx
	}
	return 0
}

func (x *Offset2D) GetDy() float64 {
	if x != nil {
		return x.Dy
	}
	return 0
}

// A range (or interval) defines the boundaries around a span
// of values; ; for example, "integers from 1 to 100 inclusive."
type ClosedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The smallest value in the range (inclusive)
	LowerBound float64 `protobuf:"fixed64,1,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// The largest value in the range (inclusive)
	UpperBound float64 `protobuf:"fixed64,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *ClosedRange) Reset() {
	*x = ClosedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedRange) ProtoMessage() {}

func (x *ClosedRange) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedRange.ProtoReflect.Descriptor instead.
func (*ClosedRange) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{3}
}

func (x *ClosedRange) GetLowerBound() float64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *ClosedRange) GetUpperBound() float64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

type Battery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remaining battery capacity as an integer percentage of total capacity (with no fractional part).
	Capacity int32 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Current battery state (discharging, charging or full)
	State Battery_State `protobuf:"varint,2,opt,name=state,proto3,enum=v2.bundle.Battery_State" json:"state,omitempty"`
}

func (x *Battery) Reset() {
	*x = Battery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Battery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battery) ProtoMessage() {}

func (x *Battery) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battery.ProtoReflect.Descriptor instead.
func (*Battery) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{4}
}

func (x *Battery) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Battery) GetState() Battery_State {
	if x != nil {
		return x.State
	}
	return Battery_UNKNOWN
}

//*
// Device orientation reported as azimuth, pitch and roll.
type Orientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Angle of rotation about the -z axis. This value represents the angle between the device's y
	// axis and the magnetic north pole. When facing north, this angle is 0, when facing south, this
	// angle is π. Likewise, when facing east, this angle is -π/2, and when facing west, this angle
	// is π/2. The range of values is -π to π.
	Azimuth float32 `protobuf:"fixed32,2,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// Angle of rotation about the x axis. This value represents the angle between a plane parallel
	// to the device's screen and a plane parallel to the ground. Assuming that the bottom edge of
	// the device faces the user and that the screen is face-up, tilting the top edge of the device
	// toward the sky creates a positive pitch angle. The range of values is -π/2 to π/2.
	Pitch float32 `protobuf:"fixed32,3,opt,name=pitch,proto3" json:"pitch,omitempty"`
	// Angle of rotation about the y axis. This value represents the angle between a plane perpendicular
	// to the device's screen and a plane perpendicular to the ground. Assuming that the bottom edge of
	// the device faces the user and that the screen is face-up, tilting the left edge of the device toward
	// the sky creates a positive roll angle. The range of values is -π to π.
	Roll float32 `protobuf:"fixed32,4,opt,name=roll,proto3" json:"roll,omitempty"`
}

func (x *Orientation) Reset() {
	*x = Orientation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation) ProtoMessage() {}

func (x *Orientation) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation.ProtoReflect.Descriptor instead.
func (*Orientation) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{5}
}

func (x *Orientation) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Orientation) GetAzimuth() float32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *Orientation) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Orientation) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

// Neither Android, nor iOS provide a trusted time source. The best we can do is record
// monotonic and non-monotonic time coordinates and rely primarily on relative time
// measurements when computing features to be used to train models.
type Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard wall clock (time and date) expressed in milliseconds since the epoch.
	// This is controlled by the user or the phone network and it may jump backwards
	// or forwards unpredictably. This clock should only be used when correspondence
	// with real-world dates and times is important.
	WallTimeMillis int64 `protobuf:"varint,1,opt,name=wall_time_millis,json=wallTimeMillis,proto3" json:"wall_time_millis,omitempty"`
	// This clock MUST be guaranteed to be monotonic, and is suitable for interval timing
	// when the interval does not span device sleep. This clock stops when the system enters
	// deep sleep (CPU off, display dark, device waiting for external input), but is not
	// affected by clock scaling, idle, or other power saving mechanisms.
	TimerMillis int64 `protobuf:"varint,2,opt,name=timer_millis,json=timerMillis,proto3" json:"timer_millis,omitempty"`
	// This clock MUST be monotonic, and needs to continue to tick even when the CPU is in
	// power saving modes, so is the recommend basis for general purpose interval timing.
	TimerRealtimeMillis int64 `protobuf:"varint,3,opt,name=timer_realtime_millis,json=timerRealtimeMillis,proto3" json:"timer_realtime_millis,omitempty"`
}

func (x *Clock) Reset() {
	*x = Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clock) ProtoMessage() {}

func (x *Clock) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clock.ProtoReflect.Descriptor instead.
func (*Clock) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{6}
}

func (x *Clock) GetWallTimeMillis() int64 {
	if x != nil {
		return x.WallTimeMillis
	}
	return 0
}

func (x *Clock) GetTimerMillis() int64 {
	if x != nil {
		return x.TimerMillis
	}
	return 0
}

func (x *Clock) GetTimerRealtimeMillis() int64 {
	if x != nil {
		return x.TimerRealtimeMillis
	}
	return 0
}

//*
// Android: https://developer.android.com/reference/android/location/Location.html
// IOS(Core Location): https://developer.apple.com/documentation/corelocation/cllocation
// This object is currently unused by the SDK.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The estimated horizontal accuracy of this location, radial, in meters
	HorizontalAccuracy float32 `protobuf:"fixed32,2,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3" json:"horizontal_accuracy,omitempty"`
	// The estimated vertical accuracy of this location, radial, in meters
	VerticalAccurracy float32 `protobuf:"fixed32,3,opt,name=vertical_accurracy,json=verticalAccurracy,proto3" json:"vertical_accurracy,omitempty"`
	// Altitude in meters above the WGS 84 reference ellipsoid
	Altitude float64 `protobuf:"fixed64,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// Bearing in degrees
	Bearing float32 `protobuf:"fixed32,5,opt,name=bearing,proto3" json:"bearing,omitempty"`
	// The estimated bearing accuracy of this location, in degrees
	BearingAccuracyDegrees float32 `protobuf:"fixed32,6,opt,name=bearing_accuracy_degrees,json=bearingAccuracyDegrees,proto3" json:"bearing_accuracy_degrees,omitempty"`
	// Latitude, in degrees
	Latitude float64 `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude, in degrees
	Longitude float64 `protobuf:"fixed64,8,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// The provider of this location data
	Provider string `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	// Speed if it is available, in meters/second over ground
	Speed float32 `protobuf:"fixed32,10,opt,name=speed,proto3" json:"speed,omitempty"`
	// The estimated accuracy of the speed
	SpeedAccurracy float32 `protobuf:"fixed32,11,opt,name=speed_accurracy,json=speedAccurracy,proto3" json:"speed_accurracy,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{7}
}

func (x *Location) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Location) GetHorizontalAccuracy() float32 {
	if x != nil {
		return x.HorizontalAccuracy
	}
	return 0
}

func (x *Location) GetVerticalAccurracy() float32 {
	if x != nil {
		return x.VerticalAccurracy
	}
	return 0
}

func (x *Location) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Location) GetBearing() float32 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

func (x *Location) GetBearingAccuracyDegrees() float32 {
	if x != nil {
		return x.BearingAccuracyDegrees
	}
	return 0
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Location) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Location) GetSpeedAccurracy() float32 {
	if x != nil {
		return x.SpeedAccurracy
	}
	return 0
}

// An accelerometer sensor reports the acceleration of the device along the three
// sensor axes. The acceleration values are in SI units (m/s^2). A typical device
// has two types of accelerometers: one that measures the acceleration of the
// device including the force of gravity, and one that doesn't include gravity.
type Accelerometer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// X-axis acceleration in SI units (m/s^2).
	X float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	// Y-axis acceleration in SI units (m/s^2).
	Y float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	// Z-axis acceleration in SI units (m/s^2).
	Z float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Accelerometer) Reset() {
	*x = Accelerometer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accelerometer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accelerometer) ProtoMessage() {}

func (x *Accelerometer) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accelerometer.ProtoReflect.Descriptor instead.
func (*Accelerometer) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{8}
}

func (x *Accelerometer) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Accelerometer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Accelerometer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Accelerometer) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

//*
// Magnetic field as perceived by the device.
type Magnetometer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// X-axis magnetic field in micro-Tesla (uT).
	X float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	// Y-axis magnetic field in micro-Tesla (uT).
	Y float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	// Z-axis magnetic field in micro-Tesla (uT).
	Z float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Magnetometer) Reset() {
	*x = Magnetometer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Magnetometer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Magnetometer) ProtoMessage() {}

func (x *Magnetometer) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Magnetometer.ProtoReflect.Descriptor instead.
func (*Magnetometer) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{9}
}

func (x *Magnetometer) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Magnetometer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Magnetometer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Magnetometer) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

//*
// Captures the rate of rotation of the device in radians around the x, y and z axis.
type Gyroscope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Rotation can be positive or negative.
	// X-axis acceleration in radians per second.
	// When looking at the bottom of the device with the screen facing up, tilting
	// the top edge of the device towards the sky reports positive values.
	X float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	// Y-axis acceleration in radians per second.
	// When looking at the bottom of the device with the screen facing up, tilting
	// the left edge of the device towards the sky reports positive values.
	Y float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	// Z-axis acceleration in radians per second.
	// When looking at the bottom of the device with the screen facing up, rotating
	// the top edge of the device in a counter clockwise direction reports positive values.
	Z float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Gyroscope) Reset() {
	*x = Gyroscope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gyroscope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gyroscope) ProtoMessage() {}

func (x *Gyroscope) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gyroscope.ProtoReflect.Descriptor instead.
func (*Gyroscope) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{10}
}

func (x *Gyroscope) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Gyroscope) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Gyroscope) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Gyroscope) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Generic data model for touch, stylus, or mouse events. Pointer events operate in the coordinate
// space of the screen, scaled to logical pixels. Logical pixels approximate a grid with about 38
// pixels per centimeter, or 96 pixels per inch.
//
// This allows analysis be performed independent of the precise hardware characteristics of the
// device. In particular, features such as touch slop can be defined in terms of roughly physical
// lengths so that the user can shift their finger by the same distance on a high-density display
// as on a low-resolution device.
type Pointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The type of the pointer event that was used.
	Type Pointer_Type `protobuf:"varint,2,opt,name=type,proto3,enum=v2.bundle.Pointer_Type" json:"type,omitempty"`
	// Bit field calculated using a bitwise AND operation over constants
	// that represent individual buttons on a device.
	Buttons int64 `protobuf:"varint,3,opt,name=buttons,proto3" json:"buttons,omitempty"`
	// Distance in logical pixels that the pointer moved since the last data point. Note
	// that the delta is reported per gesture. The delta values reset when a new gesture
	// is started.
	Delta *Offset2D `protobuf:"bytes,4,opt,name=delta,proto3" json:"delta,omitempty"`
	// Unique identifier for the pointing device. Note that all platforms iOS, Android
	// and Web report a new device id for each new gesture. The device can be used as
	// a logical grouping of Pointer events that belong to a particular gesture.
	Device int64 `protobuf:"varint,5,opt,name=device,proto3" json:"device,omitempty"`
	// The distance of the detected object from the input surface.
	Distance float64 `protobuf:"fixed64,6,opt,name=distance,proto3" json:"distance,omitempty"`
	// The range of possible values for distance.
	DistanceRange *ClosedRange `protobuf:"bytes,7,opt,name=distance_range,json=distanceRange,proto3" json:"distance_range,omitempty"`
	// Set if an application from a different security domain is in any way
	// obscuring this application's window. Note that this field is not implemented
	// as there is no means of deriving this information on all platforms.
	//
	// Deprecated: Do not use.
	Obscured bool `protobuf:"varint,8,opt,name=obscured,proto3" json:"obscured,omitempty"`
	// The orientation angle of the detected object, in radians.
	Orientation float64 `protobuf:"fixed64,9,opt,name=orientation,proto3" json:"orientation,omitempty"`
	// Coordinate of the position of the pointer, in logical pixels in the global coordinate space.
	Position *Offset2D `protobuf:"bytes,10,opt,name=position,proto3" json:"position,omitempty"`
	// The pressure of the touch.
	Pressure float64 `protobuf:"fixed64,11,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// The range of possible values for pressure.
	PressureRange *ClosedRange `protobuf:"bytes,12,opt,name=pressure_range,json=pressureRange,proto3" json:"pressure_range,omitempty"`
	// The radius of the contact ellipse along the major axis, in logical pixels.
	RadiusMajor float64 `protobuf:"fixed64,13,opt,name=radius_major,json=radiusMajor,proto3" json:"radius_major,omitempty"`
	// The radius of the contact ellipse along the minor axis, in logical pixels.
	RadiusMinor float64 `protobuf:"fixed64,14,opt,name=radius_minor,json=radiusMinor,proto3" json:"radius_minor,omitempty"`
	// The range of possible values of radius;
	RadiusRange *ClosedRange `protobuf:"bytes,15,opt,name=radius_range,json=radiusRange,proto3" json:"radius_range,omitempty"`
	// The area of the screen being pressed.
	Size float64 `protobuf:"fixed64,16,opt,name=size,proto3" json:"size,omitempty"`
	// Set if the event was generated by some automated mechanism.
	Synthesized bool `protobuf:"varint,17,opt,name=synthesized,proto3" json:"synthesized,omitempty"`
	// The tilt angle of the detected object, in radians.
	Tilt float64 `protobuf:"fixed64,18,opt,name=tilt,proto3" json:"tilt,omitempty"`
	// Set if the touch was detected to have come from a software keyboard.
	IsSoftwareKeyboard bool `protobuf:"varint,19,opt,name=is_software_keyboard,json=isSoftwareKeyboard,proto3" json:"is_software_keyboard,omitempty"`
	// The status of the pointer in relation to the containing view with
	// events for the pointer entering or leaving the view boundaries
	ViewportBoundaryStatus Pointer_ViewportBoundaryStatus `protobuf:"varint,20,opt,name=viewport_boundary_status,json=viewportBoundaryStatus,proto3,enum=v2.bundle.Pointer_ViewportBoundaryStatus" json:"viewport_boundary_status,omitempty"`
	// Represents the element that the pointer is over.
	//
	// This element is only available through the Web SDK and
	// is the element determined by the browser. The elements
	// will be restricted to only those monitored for Click data
	Target *TargetElement `protobuf:"bytes,21,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Pointer) Reset() {
	*x = Pointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pointer) ProtoMessage() {}

func (x *Pointer) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pointer.ProtoReflect.Descriptor instead.
func (*Pointer) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{11}
}

func (x *Pointer) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Pointer) GetType() Pointer_Type {
	if x != nil {
		return x.Type
	}
	return Pointer_UNKNOWN
}

func (x *Pointer) GetButtons() int64 {
	if x != nil {
		return x.Buttons
	}
	return 0
}

func (x *Pointer) GetDelta() *Offset2D {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *Pointer) GetDevice() int64 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *Pointer) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Pointer) GetDistanceRange() *ClosedRange {
	if x != nil {
		return x.DistanceRange
	}
	return nil
}

// Deprecated: Do not use.
func (x *Pointer) GetObscured() bool {
	if x != nil {
		return x.Obscured
	}
	return false
}

func (x *Pointer) GetOrientation() float64 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *Pointer) GetPosition() *Offset2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Pointer) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Pointer) GetPressureRange() *ClosedRange {
	if x != nil {
		return x.PressureRange
	}
	return nil
}

func (x *Pointer) GetRadiusMajor() float64 {
	if x != nil {
		return x.RadiusMajor
	}
	return 0
}

func (x *Pointer) GetRadiusMinor() float64 {
	if x != nil {
		return x.RadiusMinor
	}
	return 0
}

func (x *Pointer) GetRadiusRange() *ClosedRange {
	if x != nil {
		return x.RadiusRange
	}
	return nil
}

func (x *Pointer) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Pointer) GetSynthesized() bool {
	if x != nil {
		return x.Synthesized
	}
	return false
}

func (x *Pointer) GetTilt() float64 {
	if x != nil {
		return x.Tilt
	}
	return 0
}

func (x *Pointer) GetIsSoftwareKeyboard() bool {
	if x != nil {
		return x.IsSoftwareKeyboard
	}
	return false
}

func (x *Pointer) GetViewportBoundaryStatus() Pointer_ViewportBoundaryStatus {
	if x != nil {
		return x.ViewportBoundaryStatus
	}
	return Pointer_UNKNOWN_VIEWPORT_BOUNDARY_STATUS
}

func (x *Pointer) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

// Represents a message that is fired everytime a tracked
// UI element is clicked by the user
//
// This element is only available through the Web SDK and
// is currently restricted to only monitoring form elements
type Click struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Coordinate of the position of the pointer, in logical pixels in the global coordinate space.
	Position *Offset2D `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// Represents the element that was clicked.
	Target *TargetElement `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Click) Reset() {
	*x = Click{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Click) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Click) ProtoMessage() {}

func (x *Click) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Click.ProtoReflect.Descriptor instead.
func (*Click) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{12}
}

func (x *Click) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *Click) GetPosition() *Offset2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Click) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

// Corresponds to a target element that is interacted
// with when collecting events using the SDK.
type TargetElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier that represents an element that is being interacted
	// with. The id is guaranteed to be different for each element in the
	// application. The SDK makes the best effort to ensure the consistency of
	// this id. The user can override this value by providing their own id.
	TargetId string `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// This type data accompanies the target_id. The SDK makes a best
	// attempt at determining the type of the target based on
	// the properties of the element. The user can override this
	// value by providing their own type.
	TargetType string `protobuf:"bytes,2,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
}

func (x *TargetElement) Reset() {
	*x = TargetElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetElement) ProtoMessage() {}

func (x *TargetElement) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetElement.ProtoReflect.Descriptor instead.
func (*TargetElement) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{13}
}

func (x *TargetElement) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *TargetElement) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

// Represents a message that is fired everytime a text change
// event happens on a specified input target.
//
// Deprecated: Do not use.
type TextChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Represents the target input field that detected the text change event.
	Target *TargetElement `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// This value represents whether the input field represented by target(see above)
	// is in focus or not.
	Focus bool `protobuf:"varint,3,opt,name=focus,proto3" json:"focus,omitempty"`
	// Provides a snapshot of the text contained in the input field represented by the target
	// at the determined time. Note that the caller can infer the characters typed based on
	// how this text changes over time. For privacy purposes this string
	// is masked and does not correspond to the actual characters typed.
	MaskedText string `protobuf:"bytes,4,opt,name=masked_text,json=maskedText,proto3" json:"masked_text,omitempty"`
	// Returns true if the captured text exceeds the maximum allowable limit. In
	// cases like these the text is truncated and this flag returns a true.
	TruncatedText bool `protobuf:"varint,5,opt,name=truncated_text,json=truncatedText,proto3" json:"truncated_text,omitempty"`
	// Determines if the text change was a result of a specific action.
	Action TextChange_Action `protobuf:"varint,6,opt,name=action,proto3,enum=v2.bundle.TextChange_Action" json:"action,omitempty"`
}

func (x *TextChange) Reset() {
	*x = TextChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextChange) ProtoMessage() {}

func (x *TextChange) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextChange.ProtoReflect.Descriptor instead.
func (*TextChange) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{14}
}

func (x *TextChange) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *TextChange) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *TextChange) GetFocus() bool {
	if x != nil {
		return x.Focus
	}
	return false
}

func (x *TextChange) GetMaskedText() string {
	if x != nil {
		return x.MaskedText
	}
	return ""
}

func (x *TextChange) GetTruncatedText() bool {
	if x != nil {
		return x.TruncatedText
	}
	return false
}

func (x *TextChange) GetAction() TextChange_Action {
	if x != nil {
		return x.Action
	}
	return TextChange_UNKNOWN
}

// Represents a message that is fired everytime a change
// event happens on a specified input target.
type InputChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Represents the target input field that detected the input change event.
	Target *TargetElement `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// This value represents whether the input field represented by target(see above)
	// is in focus or not.
	Focus bool `protobuf:"varint,3,opt,name=focus,proto3" json:"focus,omitempty"`
	// Provides a snapshot of the value contained in the input field represented by the target
	// at the determined time. Note that the caller can infer the characters based on
	// how this value changes over time. For privacy purposes this string
	// is masked and does not correspond to the actual characters.
	// This value is unmasked in the case of checkboxes which are represented as
	// the string values of "true" or "false"
	MaskedText string `protobuf:"bytes,4,opt,name=masked_text,json=maskedText,proto3" json:"masked_text,omitempty"`
	// Returns true if the captured length of the value exceeds the maximum allowable limit. In
	// cases like these the value is truncated and this flag returns a true.
	TruncatedText bool `protobuf:"varint,5,opt,name=truncated_text,json=truncatedText,proto3" json:"truncated_text,omitempty"`
	// Determines if the input change was a result of a specific action.
	Action InputChange_Action `protobuf:"varint,6,opt,name=action,proto3,enum=v2.bundle.InputChange_Action" json:"action,omitempty"`
}

func (x *InputChange) Reset() {
	*x = InputChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputChange) ProtoMessage() {}

func (x *InputChange) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputChange.ProtoReflect.Descriptor instead.
func (*InputChange) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{15}
}

func (x *InputChange) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *InputChange) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *InputChange) GetFocus() bool {
	if x != nil {
		return x.Focus
	}
	return false
}

func (x *InputChange) GetMaskedText() string {
	if x != nil {
		return x.MaskedText
	}
	return ""
}

func (x *InputChange) GetTruncatedText() bool {
	if x != nil {
		return x.TruncatedText
	}
	return false
}

func (x *InputChange) GetAction() InputChange_Action {
	if x != nil {
		return x.Action
	}
	return InputChange_UNKNOWN
}

// Represents a keyboard event or key event. This
// data is collected whenever available.
type KeyPress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The type of key event that was detected.
	Type KeyPress_Type `protobuf:"varint,2,opt,name=type,proto3,enum=v2.bundle.KeyPress_Type" json:"type,omitempty"`
	// Provides a string value for a special, logical or modifier key
	// that was pressed, for eg. 'Home', 'Left Shift' etc.
	// The value reflects the actual key that was pressed and is therefore not masked.
	// There is a possibility that the value returned by this field differs
	// across platforms.
	SpecialKey string `protobuf:"bytes,3,opt,name=special_key,json=specialKey,proto3" json:"special_key,omitempty"`
	// The unicode value for the key pressed. This field is masked for privacy
	// reasons and does not correspond to the exact key that was pressed.
	// The pressed key is guaranteed to be a unicode character. Defaults to
	// '0' if unavailable.
	MaskedKey int32 `protobuf:"varint,4,opt,name=masked_key,json=maskedKey,proto3" json:"masked_key,omitempty"`
	// Represents the target field that detected the key event.
	Target *TargetElement `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	// Flag to specify the event as including an 'Alt Key'
	AltKey bool `protobuf:"varint,6,opt,name=alt_key,json=altKey,proto3" json:"alt_key,omitempty"`
	// Flag to specify the event as including an 'Control (Ctrl) Key'
	ControlKey bool `protobuf:"varint,7,opt,name=control_key,json=controlKey,proto3" json:"control_key,omitempty"`
	// Flag to specify the event as including an 'Meta Key'.
	// This includes the Windows Key (⊞) on windows and the Command Key (⌘) on MacOS
	MetaKey bool `protobuf:"varint,8,opt,name=meta_key,json=metaKey,proto3" json:"meta_key,omitempty"`
	// Flag to specify the event was captured while the 'Shift' Key
	// was active
	ShiftKey bool `protobuf:"varint,9,opt,name=shift_key,json=shiftKey,proto3" json:"shift_key,omitempty"`
}

func (x *KeyPress) Reset() {
	*x = KeyPress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPress) ProtoMessage() {}

func (x *KeyPress) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPress.ProtoReflect.Descriptor instead.
func (*KeyPress) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{16}
}

func (x *KeyPress) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *KeyPress) GetType() KeyPress_Type {
	if x != nil {
		return x.Type
	}
	return KeyPress_UNKNOWN
}

func (x *KeyPress) GetSpecialKey() string {
	if x != nil {
		return x.SpecialKey
	}
	return ""
}

func (x *KeyPress) GetMaskedKey() int32 {
	if x != nil {
		return x.MaskedKey
	}
	return 0
}

func (x *KeyPress) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *KeyPress) GetAltKey() bool {
	if x != nil {
		return x.AltKey
	}
	return false
}

func (x *KeyPress) GetControlKey() bool {
	if x != nil {
		return x.ControlKey
	}
	return false
}

func (x *KeyPress) GetMetaKey() bool {
	if x != nil {
		return x.MetaKey
	}
	return false
}

func (x *KeyPress) GetShiftKey() bool {
	if x != nil {
		return x.ShiftKey
	}
	return false
}

// Represents a loss or gain of Focus for a
// target element.
type FocusChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The type of focus event that was detected.
	Type FocusChange_Type `protobuf:"varint,2,opt,name=type,proto3,enum=v2.bundle.FocusChange_Type" json:"type,omitempty"`
	// Represents the target field that detected the key event.
	Target *TargetElement `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *FocusChange) Reset() {
	*x = FocusChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusChange) ProtoMessage() {}

func (x *FocusChange) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusChange.ProtoReflect.Descriptor instead.
func (*FocusChange) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{17}
}

func (x *FocusChange) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *FocusChange) GetType() FocusChange_Type {
	if x != nil {
		return x.Type
	}
	return FocusChange_UNKNOWN
}

func (x *FocusChange) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

// Represents the movement of the page when it is scrolled.
//
// Note: A scroll message means that the viewport was shifted. Scroll messages will not
// be recorded if the view does not extend past the edge of the viewport
type ViewportScroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The X scroll position expressed as the offset from the view starting position
	XPosition int64 `protobuf:"varint,2,opt,name=x_position,json=xPosition,proto3" json:"x_position,omitempty"`
	// The Y scroll position expressed as the offset from the view starting position
	YPosition int64 `protobuf:"varint,3,opt,name=y_position,json=yPosition,proto3" json:"y_position,omitempty"`
}

func (x *ViewportScroll) Reset() {
	*x = ViewportScroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewportScroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewportScroll) ProtoMessage() {}

func (x *ViewportScroll) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewportScroll.ProtoReflect.Descriptor instead.
func (*ViewportScroll) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{18}
}

func (x *ViewportScroll) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *ViewportScroll) GetXPosition() int64 {
	if x != nil {
		return x.XPosition
	}
	return 0
}

func (x *ViewportScroll) GetYPosition() int64 {
	if x != nil {
		return x.YPosition
	}
	return 0
}

// Represents interaction with the scroll wheel present on some mice or
// the scroll gesture present on trackpads or touch sensitive mice.
//
// Note: A MouseWheel event does not necessarily trigger a ViewportScroll. A
// corresponding ViewportScroll will only occur if the view extends past the viewport
// allowing the view to be scrolled
type MouseWheel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The delta distance, in logical pixels, requested in the X direction on the scroll wheel.
	// This is the actual value reported when wheel_mode is `PIXEL`, it is calculated otherwise.
	WheelDeltaX int64 `protobuf:"varint,2,opt,name=wheel_delta_x,json=wheelDeltaX,proto3" json:"wheel_delta_x,omitempty"`
	// The delta distance, in logical pixels, requested in the Y direction on the scroll wheel.
	// This is the actual value reported when wheel_mode is `PIXEL`, it is calculated otherwise.
	WheelDeltaY int64 `protobuf:"varint,3,opt,name=wheel_delta_y,json=wheelDeltaY,proto3" json:"wheel_delta_y,omitempty"`
	// The mode of scrolling used by mouse wheel
	WheelMode MouseWheel_WheelMode `protobuf:"varint,4,opt,name=wheel_mode,json=wheelMode,proto3,enum=v2.bundle.MouseWheel_WheelMode" json:"wheel_mode,omitempty"`
	// The delta distance, in lines, requested in the X direction on the scroll wheel.
	// Only set when wheel_mode is `LINE`
	WheelDeltaXLine int64 `protobuf:"varint,5,opt,name=wheel_delta_x_line,json=wheelDeltaXLine,proto3" json:"wheel_delta_x_line,omitempty"`
	// The delta distance, in lines, requested in the Y direction on the scroll wheel.
	// Only set when wheel_mode is `LINE`
	WheelDeltaYLine int64 `protobuf:"varint,6,opt,name=wheel_delta_y_line,json=wheelDeltaYLine,proto3" json:"wheel_delta_y_line,omitempty"`
	// The delta distance, in pages, requested in the X direction on the scroll wheel.
	// Only set when wheel_mode is `PAGE`
	WheelDeltaXPage int64 `protobuf:"varint,7,opt,name=wheel_delta_x_page,json=wheelDeltaXPage,proto3" json:"wheel_delta_x_page,omitempty"`
	// The delta distance, in pages, requested in the Y direction on the scroll wheel.
	// Only set when wheel_mode is `PAGE`
	WheelDeltaYPage int64 `protobuf:"varint,8,opt,name=wheel_delta_y_page,json=wheelDeltaYPage,proto3" json:"wheel_delta_y_page,omitempty"`
}

func (x *MouseWheel) Reset() {
	*x = MouseWheel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseWheel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseWheel) ProtoMessage() {}

func (x *MouseWheel) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseWheel.ProtoReflect.Descriptor instead.
func (*MouseWheel) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{19}
}

func (x *MouseWheel) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *MouseWheel) GetWheelDeltaX() int64 {
	if x != nil {
		return x.WheelDeltaX
	}
	return 0
}

func (x *MouseWheel) GetWheelDeltaY() int64 {
	if x != nil {
		return x.WheelDeltaY
	}
	return 0
}

func (x *MouseWheel) GetWheelMode() MouseWheel_WheelMode {
	if x != nil {
		return x.WheelMode
	}
	return MouseWheel_UNKNOWN_WHEEL_MODE
}

func (x *MouseWheel) GetWheelDeltaXLine() int64 {
	if x != nil {
		return x.WheelDeltaXLine
	}
	return 0
}

func (x *MouseWheel) GetWheelDeltaYLine() int64 {
	if x != nil {
		return x.WheelDeltaYLine
	}
	return 0
}

func (x *MouseWheel) GetWheelDeltaXPage() int64 {
	if x != nil {
		return x.WheelDeltaXPage
	}
	return 0
}

func (x *MouseWheel) GetWheelDeltaYPage() int64 {
	if x != nil {
		return x.WheelDeltaYPage
	}
	return 0
}

// Tracks a change in permissions for a sensor during a Session
type PermissionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The sensor affected by the permission change
	SensorType common.SensorType `protobuf:"varint,2,opt,name=sensor_type,json=sensorType,proto3,enum=v2.common.SensorType" json:"sensor_type,omitempty"`
	// The new status of the Sensor permission
	PermissionStatus PermissionEvent_PermissionStatus `protobuf:"varint,3,opt,name=permission_status,json=permissionStatus,proto3,enum=v2.bundle.PermissionEvent_PermissionStatus" json:"permission_status,omitempty"`
}

func (x *PermissionEvent) Reset() {
	*x = PermissionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionEvent) ProtoMessage() {}

func (x *PermissionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionEvent.ProtoReflect.Descriptor instead.
func (*PermissionEvent) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{20}
}

func (x *PermissionEvent) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *PermissionEvent) GetSensorType() common.SensorType {
	if x != nil {
		return x.SensorType
	}
	return common.SensorType(0)
}

func (x *PermissionEvent) GetPermissionStatus() PermissionEvent_PermissionStatus {
	if x != nil {
		return x.PermissionStatus
	}
	return PermissionEvent_UNKNOWN_PERMISSION_STATUS
}

// Tracks a change in size of the Viewport during a Session
type ViewportSizeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Physical width of the device in pixels
	DevicePhysicalWidth int64 `protobuf:"varint,2,opt,name=device_physical_width,json=devicePhysicalWidth,proto3" json:"device_physical_width,omitempty"`
	// Physical height of the device in pixels
	DevicePhysicalHeight int64 `protobuf:"varint,3,opt,name=device_physical_height,json=devicePhysicalHeight,proto3" json:"device_physical_height,omitempty"`
	// Logical width of the device in pixels
	DeviceLogicalWidth int64 `protobuf:"varint,4,opt,name=device_logical_width,json=deviceLogicalWidth,proto3" json:"device_logical_width,omitempty"`
	// Logical height of the device in pixels
	DeviceLogicalHeight int64 `protobuf:"varint,5,opt,name=device_logical_height,json=deviceLogicalHeight,proto3" json:"device_logical_height,omitempty"`
	// The number of device pixels for each logical pixel for the screen this view is displayed on.
	DevicePixelRatio float64 `protobuf:"fixed64,6,opt,name=device_pixel_ratio,json=devicePixelRatio,proto3" json:"device_pixel_ratio,omitempty"`
	// The direction the viewport is oriented
	ViewportOrientation ViewportSizeEvent_ViewportOrientationDirection `protobuf:"varint,7,opt,name=viewport_orientation,json=viewportOrientation,proto3,enum=v2.bundle.ViewportSizeEvent_ViewportOrientationDirection" json:"viewport_orientation,omitempty"`
}

func (x *ViewportSizeEvent) Reset() {
	*x = ViewportSizeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewportSizeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewportSizeEvent) ProtoMessage() {}

func (x *ViewportSizeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewportSizeEvent.ProtoReflect.Descriptor instead.
func (*ViewportSizeEvent) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{21}
}

func (x *ViewportSizeEvent) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *ViewportSizeEvent) GetDevicePhysicalWidth() int64 {
	if x != nil {
		return x.DevicePhysicalWidth
	}
	return 0
}

func (x *ViewportSizeEvent) GetDevicePhysicalHeight() int64 {
	if x != nil {
		return x.DevicePhysicalHeight
	}
	return 0
}

func (x *ViewportSizeEvent) GetDeviceLogicalWidth() int64 {
	if x != nil {
		return x.DeviceLogicalWidth
	}
	return 0
}

func (x *ViewportSizeEvent) GetDeviceLogicalHeight() int64 {
	if x != nil {
		return x.DeviceLogicalHeight
	}
	return 0
}

func (x *ViewportSizeEvent) GetDevicePixelRatio() float64 {
	if x != nil {
		return x.DevicePixelRatio
	}
	return 0
}

func (x *ViewportSizeEvent) GetViewportOrientation() ViewportSizeEvent_ViewportOrientationDirection {
	if x != nil {
		return x.ViewportOrientation
	}
	return ViewportSizeEvent_UNKNOWN_ORIENTATION_DIRECTION
}

// Tracks the changes in the user's ability to work with
// the application
type AppLifeCycleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// Tracks the visibility state of the application.
	AppLifeCycleStatus AppLifeCycleEvent_AppLifeCycleStatus `protobuf:"varint,2,opt,name=app_life_cycle_status,json=appLifeCycleStatus,proto3,enum=v2.bundle.AppLifeCycleEvent_AppLifeCycleStatus" json:"app_life_cycle_status,omitempty"`
}

func (x *AppLifeCycleEvent) Reset() {
	*x = AppLifeCycleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLifeCycleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLifeCycleEvent) ProtoMessage() {}

func (x *AppLifeCycleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLifeCycleEvent.ProtoReflect.Descriptor instead.
func (*AppLifeCycleEvent) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{22}
}

func (x *AppLifeCycleEvent) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *AppLifeCycleEvent) GetAppLifeCycleStatus() AppLifeCycleEvent_AppLifeCycleStatus {
	if x != nil {
		return x.AppLifeCycleStatus
	}
	return AppLifeCycleEvent_UNKNOWN_APP_LIFE_CYCLE_STATUS
}

// A timestamped custom data store for capturing categorized data
// during a session. These events provide point in time information
// generated by the implementer of the Moonsense SDK
type CustomEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The event type or a category for the event. E.g. "targetElementCreated"
	//
	// Field constrained to 50 characters
	EventName string `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// A map of key/value pairs to record custom data associated with
	// the captured event.
	//
	// Key Field constrained to 50 characters
	// Value Field constrained to 500 characters
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An optional reference key for associating this event across a session. E.g. the
	// unique id for a targetElement.
	//
	// Field constrained to 50 characters
	EventKey string `protobuf:"bytes,4,opt,name=event_key,json=eventKey,proto3" json:"event_key,omitempty"`
}

func (x *CustomEvent) Reset() {
	*x = CustomEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomEvent) ProtoMessage() {}

func (x *CustomEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomEvent.ProtoReflect.Descriptor instead.
func (*CustomEvent) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{23}
}

func (x *CustomEvent) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *CustomEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *CustomEvent) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *CustomEvent) GetEventKey() string {
	if x != nil {
		return x.EventKey
	}
	return ""
}

// An event that represents a form submission inside a webpage.
//
// This event is specific to the Web SDK
type FormSubmitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event dispatch in milliseconds, relative to an arbitrary timeline.
	DeterminedAt int64 `protobuf:"varint,1,opt,name=determined_at,json=determinedAt,proto3" json:"determined_at,omitempty"`
	// The element that requested the submit event
	Submitter *TargetElement `protobuf:"bytes,2,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// The element being submitted
	Target *TargetElement `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *FormSubmitEvent) Reset() {
	*x = FormSubmitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormSubmitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormSubmitEvent) ProtoMessage() {}

func (x *FormSubmitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormSubmitEvent.ProtoReflect.Descriptor instead.
func (*FormSubmitEvent) Descriptor() ([]byte, []int) {
	return file_bundle_v2_proto_rawDescGZIP(), []int{24}
}

func (x *FormSubmitEvent) GetDeterminedAt() int64 {
	if x != nil {
		return x.DeterminedAt
	}
	return 0
}

func (x *FormSubmitEvent) GetSubmitter() *TargetElement {
	if x != nil {
		return x.Submitter
	}
	return nil
}

func (x *FormSubmitEvent) GetTarget() *TargetElement {
	if x != nil {
		return x.Target
	}
	return nil
}

var File_bundle_v2_proto protoreflect.FileDescriptor

var file_bundle_v2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x02, 0x0a,
	0x0c, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0xe5, 0x0d, 0x0a, 0x06,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x47, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2e, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x10, 0x6d,
	0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0e, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2e, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0d, 0x67,
	0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x10, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x19, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x11, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e,
	0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f,
	0x0a, 0x15, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x66,
	0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x61, 0x70, 0x70,
	0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3b, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x50, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04,
	0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d,
	0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x11,
	0x10, 0x12, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x2a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x78, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x79, 0x22,
	0x4f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x76, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x7a,
	0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x22,
	0x88, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x72, 0x61, 0x63,
	0x79, 0x22, 0x5e, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x7a, 0x22, 0x5d, 0x0a, 0x0c, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a,
	0x22, 0x5a, 0x0a, 0x09, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0xba, 0x08, 0x0a,
	0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x32,
	0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x44, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x32,
	0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x63, 0x75, 0x72, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x63, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x32, 0x2e, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x63, 0x0a,
	0x18, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x76, 0x69, 0x65, 0x77,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x59,
	0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x55, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f,
	0x55, 0x43, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x04,
	0x22, 0x77, 0x0a, 0x16, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x44, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x0d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73,
	0x6b, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x55, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x53, 0x54, 0x45, 0x10, 0x02, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x29, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x41, 0x53, 0x54, 0x45, 0x10, 0x02, 0x22, 0xf0, 0x02, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x6c, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x6c, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x2d,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x22, 0xcc, 0x01,
	0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f,
	0x43, 0x55, 0x53, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x22, 0x73, 0x0a, 0x0e,
	0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb1, 0x03, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x58, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x68, 0x65,
	0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x59, 0x12, 0x3e, 0x0a,
	0x0a, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x2e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x78, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x68, 0x65, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x58, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x59, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x58,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x59, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x42, 0x0a, 0x09, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x47, 0x45, 0x10, 0x03, 0x22, 0xeb, 0x02, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x4e, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x05, 0x22, 0xc6, 0x04, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x6c, 0x0a, 0x14,
	0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x76, 0x32, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x1c, 0x56,
	0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x04, 0x22, 0x82, 0x02, 0x0a,
	0x11, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x66, 0x65,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10,
	0x03, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x32, 0x2e, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x46, 0x6f,
	0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x4e, 0x0a, 0x16,
	0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x0e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x32,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x24, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x3b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bundle_v2_proto_rawDescOnce sync.Once
	file_bundle_v2_proto_rawDescData = file_bundle_v2_proto_rawDesc
)

func file_bundle_v2_proto_rawDescGZIP() []byte {
	file_bundle_v2_proto_rawDescOnce.Do(func() {
		file_bundle_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_bundle_v2_proto_rawDescData)
	})
	return file_bundle_v2_proto_rawDescData
}

var file_bundle_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_bundle_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_bundle_v2_proto_goTypes = []interface{}{
	(Battery_State)(0),                                  // 0: v2.bundle.Battery.State
	(Pointer_Type)(0),                                   // 1: v2.bundle.Pointer.Type
	(Pointer_ViewportBoundaryStatus)(0),                 // 2: v2.bundle.Pointer.ViewportBoundaryStatus
	(TextChange_Action)(0),                              // 3: v2.bundle.TextChange.Action
	(InputChange_Action)(0),                             // 4: v2.bundle.InputChange.Action
	(KeyPress_Type)(0),                                  // 5: v2.bundle.KeyPress.Type
	(FocusChange_Type)(0),                               // 6: v2.bundle.FocusChange.Type
	(MouseWheel_WheelMode)(0),                           // 7: v2.bundle.MouseWheel.WheelMode
	(PermissionEvent_PermissionStatus)(0),               // 8: v2.bundle.PermissionEvent.PermissionStatus
	(ViewportSizeEvent_ViewportOrientationDirection)(0), // 9: v2.bundle.ViewportSizeEvent.ViewportOrientationDirection
	(AppLifeCycleEvent_AppLifeCycleStatus)(0),           // 10: v2.bundle.AppLifeCycleEvent.AppLifeCycleStatus
	(*SealedBundle)(nil),                                // 11: v2.bundle.SealedBundle
	(*Bundle)(nil),                                      // 12: v2.bundle.Bundle
	(*Offset2D)(nil),                                    // 13: v2.bundle.Offset2D
	(*ClosedRange)(nil),                                 // 14: v2.bundle.ClosedRange
	(*Battery)(nil),                                     // 15: v2.bundle.Battery
	(*Orientation)(nil),                                 // 16: v2.bundle.Orientation
	(*Clock)(nil),                                       // 17: v2.bundle.Clock
	(*Location)(nil),                                    // 18: v2.bundle.Location
	(*Accelerometer)(nil),                               // 19: v2.bundle.Accelerometer
	(*Magnetometer)(nil),                                // 20: v2.bundle.Magnetometer
	(*Gyroscope)(nil),                                   // 21: v2.bundle.Gyroscope
	(*Pointer)(nil),                                     // 22: v2.bundle.Pointer
	(*Click)(nil),                                       // 23: v2.bundle.Click
	(*TargetElement)(nil),                               // 24: v2.bundle.TargetElement
	(*TextChange)(nil),                                  // 25: v2.bundle.TextChange
	(*InputChange)(nil),                                 // 26: v2.bundle.InputChange
	(*KeyPress)(nil),                                    // 27: v2.bundle.KeyPress
	(*FocusChange)(nil),                                 // 28: v2.bundle.FocusChange
	(*ViewportScroll)(nil),                              // 29: v2.bundle.ViewportScroll
	(*MouseWheel)(nil),                                  // 30: v2.bundle.MouseWheel
	(*PermissionEvent)(nil),                             // 31: v2.bundle.PermissionEvent
	(*ViewportSizeEvent)(nil),                           // 32: v2.bundle.ViewportSizeEvent
	(*AppLifeCycleEvent)(nil),                           // 33: v2.bundle.AppLifeCycleEvent
	(*CustomEvent)(nil),                                 // 34: v2.bundle.CustomEvent
	(*FormSubmitEvent)(nil),                             // 35: v2.bundle.FormSubmitEvent
	nil,                                                 // 36: v2.bundle.Bundle.FeaturesEntry
	nil,                                                 // 37: v2.bundle.CustomEvent.PropertiesEntry
	(common.SensorType)(0),                              // 38: v2.common.SensorType
	(*feature.Feature)(nil),                             // 39: v2.feature.Feature
}
var file_bundle_v2_proto_depIdxs = []int32{
	12, // 0: v2.bundle.SealedBundle.bundle:type_name -> v2.bundle.Bundle
	18, // 1: v2.bundle.Bundle.location_data:type_name -> v2.bundle.Location
	19, // 2: v2.bundle.Bundle.accelerometer_data:type_name -> v2.bundle.Accelerometer
	20, // 3: v2.bundle.Bundle.magnetometer_data:type_name -> v2.bundle.Magnetometer
	21, // 4: v2.bundle.Bundle.gyroscope_data:type_name -> v2.bundle.Gyroscope
	17, // 5: v2.bundle.Bundle.client_time:type_name -> v2.bundle.Clock
	15, // 6: v2.bundle.Bundle.battery:type_name -> v2.bundle.Battery
	16, // 7: v2.bundle.Bundle.orientation_data:type_name -> v2.bundle.Orientation
	22, // 8: v2.bundle.Bundle.pointer_data:type_name -> v2.bundle.Pointer
	19, // 9: v2.bundle.Bundle.linear_accelerometer_data:type_name -> v2.bundle.Accelerometer
	25, // 10: v2.bundle.Bundle.text_change_data:type_name -> v2.bundle.TextChange
	27, // 11: v2.bundle.Bundle.key_press_data:type_name -> v2.bundle.KeyPress
	28, // 12: v2.bundle.Bundle.focus_change_data:type_name -> v2.bundle.FocusChange
	29, // 13: v2.bundle.Bundle.viewport_scroll_data:type_name -> v2.bundle.ViewportScroll
	30, // 14: v2.bundle.Bundle.mouse_wheel_data:type_name -> v2.bundle.MouseWheel
	31, // 15: v2.bundle.Bundle.permission_events:type_name -> v2.bundle.PermissionEvent
	32, // 16: v2.bundle.Bundle.viewport_size_events:type_name -> v2.bundle.ViewportSizeEvent
	33, // 17: v2.bundle.Bundle.app_life_cycle_events:type_name -> v2.bundle.AppLifeCycleEvent
	34, // 18: v2.bundle.Bundle.custom_events:type_name -> v2.bundle.CustomEvent
	23, // 19: v2.bundle.Bundle.click_data:type_name -> v2.bundle.Click
	36, // 20: v2.bundle.Bundle.features:type_name -> v2.bundle.Bundle.FeaturesEntry
	26, // 21: v2.bundle.Bundle.input_change_data:type_name -> v2.bundle.InputChange
	35, // 22: v2.bundle.Bundle.form_submit_events:type_name -> v2.bundle.FormSubmitEvent
	0,  // 23: v2.bundle.Battery.state:type_name -> v2.bundle.Battery.State
	1,  // 24: v2.bundle.Pointer.type:type_name -> v2.bundle.Pointer.Type
	13, // 25: v2.bundle.Pointer.delta:type_name -> v2.bundle.Offset2D
	14, // 26: v2.bundle.Pointer.distance_range:type_name -> v2.bundle.ClosedRange
	13, // 27: v2.bundle.Pointer.position:type_name -> v2.bundle.Offset2D
	14, // 28: v2.bundle.Pointer.pressure_range:type_name -> v2.bundle.ClosedRange
	14, // 29: v2.bundle.Pointer.radius_range:type_name -> v2.bundle.ClosedRange
	2,  // 30: v2.bundle.Pointer.viewport_boundary_status:type_name -> v2.bundle.Pointer.ViewportBoundaryStatus
	24, // 31: v2.bundle.Pointer.target:type_name -> v2.bundle.TargetElement
	13, // 32: v2.bundle.Click.position:type_name -> v2.bundle.Offset2D
	24, // 33: v2.bundle.Click.target:type_name -> v2.bundle.TargetElement
	24, // 34: v2.bundle.TextChange.target:type_name -> v2.bundle.TargetElement
	3,  // 35: v2.bundle.TextChange.action:type_name -> v2.bundle.TextChange.Action
	24, // 36: v2.bundle.InputChange.target:type_name -> v2.bundle.TargetElement
	4,  // 37: v2.bundle.InputChange.action:type_name -> v2.bundle.InputChange.Action
	5,  // 38: v2.bundle.KeyPress.type:type_name -> v2.bundle.KeyPress.Type
	24, // 39: v2.bundle.KeyPress.target:type_name -> v2.bundle.TargetElement
	6,  // 40: v2.bundle.FocusChange.type:type_name -> v2.bundle.FocusChange.Type
	24, // 41: v2.bundle.FocusChange.target:type_name -> v2.bundle.TargetElement
	7,  // 42: v2.bundle.MouseWheel.wheel_mode:type_name -> v2.bundle.MouseWheel.WheelMode
	38, // 43: v2.bundle.PermissionEvent.sensor_type:type_name -> v2.common.SensorType
	8,  // 44: v2.bundle.PermissionEvent.permission_status:type_name -> v2.bundle.PermissionEvent.PermissionStatus
	9,  // 45: v2.bundle.ViewportSizeEvent.viewport_orientation:type_name -> v2.bundle.ViewportSizeEvent.ViewportOrientationDirection
	10, // 46: v2.bundle.AppLifeCycleEvent.app_life_cycle_status:type_name -> v2.bundle.AppLifeCycleEvent.AppLifeCycleStatus
	37, // 47: v2.bundle.CustomEvent.properties:type_name -> v2.bundle.CustomEvent.PropertiesEntry
	24, // 48: v2.bundle.FormSubmitEvent.submitter:type_name -> v2.bundle.TargetElement
	24, // 49: v2.bundle.FormSubmitEvent.target:type_name -> v2.bundle.TargetElement
	39, // 50: v2.bundle.Bundle.FeaturesEntry.value:type_name -> v2.feature.Feature
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_bundle_v2_proto_init() }
func file_bundle_v2_proto_init() {
	if File_bundle_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bundle_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealedBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offset2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Battery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orientation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Accelerometer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Magnetometer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gyroscope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Click); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FocusChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewportScroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseWheel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewportSizeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppLifeCycleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_v2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormSubmitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bundle_v2_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bundle_v2_proto_goTypes,
		DependencyIndexes: file_bundle_v2_proto_depIdxs,
		EnumInfos:         file_bundle_v2_proto_enumTypes,
		MessageInfos:      file_bundle_v2_proto_msgTypes,
	}.Build()
	File_bundle_v2_proto = out.File
	file_bundle_v2_proto_rawDesc = nil
	file_bundle_v2_proto_goTypes = nil
	file_bundle_v2_proto_depIdxs = nil
}
