// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: feature.proto

package feature

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BytesList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BytesList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BytesList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BytesListMultiError, or nil
// if none found.
func (m *BytesList) ValidateAll() error {
	return m.validate(true)
}

func (m *BytesList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BytesListMultiError(errors)
	}

	return nil
}

// BytesListMultiError is an error wrapping multiple validation errors returned
// by BytesList.ValidateAll() if the designated constraints aren't met.
type BytesListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BytesListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BytesListMultiError) AllErrors() []error { return m }

// BytesListValidationError is the validation error returned by
// BytesList.Validate if the designated constraints aren't met.
type BytesListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesListValidationError) ErrorName() string { return "BytesListValidationError" }

// Error satisfies the builtin error interface
func (e BytesListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesListValidationError{}

// Validate checks the field values on DoubleList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleListMultiError, or
// nil if none found.
func (m *DoubleList) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DoubleListMultiError(errors)
	}

	return nil
}

// DoubleListMultiError is an error wrapping multiple validation errors
// returned by DoubleList.ValidateAll() if the designated constraints aren't met.
type DoubleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoubleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoubleListMultiError) AllErrors() []error { return m }

// DoubleListValidationError is the validation error returned by
// DoubleList.Validate if the designated constraints aren't met.
type DoubleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleListValidationError) ErrorName() string { return "DoubleListValidationError" }

// Error satisfies the builtin error interface
func (e DoubleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleListValidationError{}

// Validate checks the field values on DoubleMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleMap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleMapMultiError, or nil
// if none found.
func (m *DoubleMap) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return DoubleMapMultiError(errors)
	}

	return nil
}

// DoubleMapMultiError is an error wrapping multiple validation errors returned
// by DoubleMap.ValidateAll() if the designated constraints aren't met.
type DoubleMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoubleMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoubleMapMultiError) AllErrors() []error { return m }

// DoubleMapValidationError is the validation error returned by
// DoubleMap.Validate if the designated constraints aren't met.
type DoubleMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleMapValidationError) ErrorName() string { return "DoubleMapValidationError" }

// Error satisfies the builtin error interface
func (e DoubleMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleMapValidationError{}

// Validate checks the field values on Int64List with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64List with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64ListMultiError, or nil
// if none found.
func (m *Int64List) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Int64ListMultiError(errors)
	}

	return nil
}

// Int64ListMultiError is an error wrapping multiple validation errors returned
// by Int64List.ValidateAll() if the designated constraints aren't met.
type Int64ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int64ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int64ListMultiError) AllErrors() []error { return m }

// Int64ListValidationError is the validation error returned by
// Int64List.Validate if the designated constraints aren't met.
type Int64ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64ListValidationError) ErrorName() string { return "Int64ListValidationError" }

// Error satisfies the builtin error interface
func (e Int64ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64ListValidationError{}

// Validate checks the field values on StringList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringListMultiError, or
// nil if none found.
func (m *StringList) ValidateAll() error {
	return m.validate(true)
}

func (m *StringList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StringListMultiError(errors)
	}

	return nil
}

// StringListMultiError is an error wrapping multiple validation errors
// returned by StringList.ValidateAll() if the designated constraints aren't met.
type StringListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringListMultiError) AllErrors() []error { return m }

// StringListValidationError is the validation error returned by
// StringList.Validate if the designated constraints aren't met.
type StringListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringListValidationError) ErrorName() string { return "StringListValidationError" }

// Error satisfies the builtin error interface
func (e StringListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringListValidationError{}

// Validate checks the field values on Feature with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Feature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Feature with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FeatureMultiError, or nil if none found.
func (m *Feature) ValidateAll() error {
	return m.validate(true)
}

func (m *Feature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *Feature_BytesList:
		if v == nil {
			err := FeatureValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBytesList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "BytesList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "BytesList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBytesList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeatureValidationError{
					field:  "BytesList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Feature_DoubleList:
		if v == nil {
			err := FeatureValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDoubleList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "DoubleList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "DoubleList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDoubleList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeatureValidationError{
					field:  "DoubleList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Feature_Int64List:
		if v == nil {
			err := FeatureValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInt64List()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "Int64List",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "Int64List",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInt64List()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeatureValidationError{
					field:  "Int64List",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Feature_StringList:
		if v == nil {
			err := FeatureValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStringList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "StringList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "StringList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeatureValidationError{
					field:  "StringList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Feature_DoubleMap:
		if v == nil {
			err := FeatureValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDoubleMap()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "DoubleMap",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeatureValidationError{
						field:  "DoubleMap",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDoubleMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeatureValidationError{
					field:  "DoubleMap",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FeatureMultiError(errors)
	}

	return nil
}

// FeatureMultiError is an error wrapping multiple validation errors returned
// by Feature.ValidateAll() if the designated constraints aren't met.
type FeatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeatureMultiError) AllErrors() []error { return m }

// FeatureValidationError is the validation error returned by Feature.Validate
// if the designated constraints aren't met.
type FeatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureValidationError) ErrorName() string { return "FeatureValidationError" }

// Error satisfies the builtin error interface
func (e FeatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureValidationError{}
