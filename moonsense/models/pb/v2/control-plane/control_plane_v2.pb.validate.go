// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: control_plane_v2.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DataPlaneRegion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataPlaneRegion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataPlaneRegion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataPlaneRegionMultiError, or nil if none found.
func (m *DataPlaneRegion) ValidateAll() error {
	return m.validate(true)
}

func (m *DataPlaneRegion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Lat

	// no validation rules for Lon

	// no validation rules for Region

	// no validation rules for DefaultPrimary

	// no validation rules for DefaultBackup

	// no validation rules for Status

	if len(errors) > 0 {
		return DataPlaneRegionMultiError(errors)
	}

	return nil
}

// DataPlaneRegionMultiError is an error wrapping multiple validation errors
// returned by DataPlaneRegion.ValidateAll() if the designated constraints
// aren't met.
type DataPlaneRegionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataPlaneRegionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataPlaneRegionMultiError) AllErrors() []error { return m }

// DataPlaneRegionValidationError is the validation error returned by
// DataPlaneRegion.Validate if the designated constraints aren't met.
type DataPlaneRegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataPlaneRegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataPlaneRegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataPlaneRegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataPlaneRegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataPlaneRegionValidationError) ErrorName() string { return "DataPlaneRegionValidationError" }

// Error satisfies the builtin error interface
func (e DataPlaneRegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataPlaneRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataPlaneRegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataPlaneRegionValidationError{}

// Validate checks the field values on DataRegionsLocateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataRegionsLocateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataRegionsLocateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataRegionsLocateResponseMultiError, or nil if none found.
func (m *DataRegionsLocateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DataRegionsLocateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrimaryUrl

	// no validation rules for BackupUrl

	// no validation rules for PrimaryNetworkUrl

	// no validation rules for BackupNetworkUrl

	if len(errors) > 0 {
		return DataRegionsLocateResponseMultiError(errors)
	}

	return nil
}

// DataRegionsLocateResponseMultiError is an error wrapping multiple validation
// errors returned by DataRegionsLocateResponse.ValidateAll() if the
// designated constraints aren't met.
type DataRegionsLocateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataRegionsLocateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataRegionsLocateResponseMultiError) AllErrors() []error { return m }

// DataRegionsLocateResponseValidationError is the validation error returned by
// DataRegionsLocateResponse.Validate if the designated constraints aren't met.
type DataRegionsLocateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataRegionsLocateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataRegionsLocateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataRegionsLocateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataRegionsLocateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataRegionsLocateResponseValidationError) ErrorName() string {
	return "DataRegionsLocateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DataRegionsLocateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataRegionsLocateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataRegionsLocateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataRegionsLocateResponseValidationError{}

// Validate checks the field values on DataRegionsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataRegionsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataRegionsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataRegionsListResponseMultiError, or nil if none found.
func (m *DataRegionsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DataRegionsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataRegionsListResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataRegionsListResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataRegionsListResponseValidationError{
					field:  fmt.Sprintf("Regions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataRegionsListResponseMultiError(errors)
	}

	return nil
}

// DataRegionsListResponseMultiError is an error wrapping multiple validation
// errors returned by DataRegionsListResponse.ValidateAll() if the designated
// constraints aren't met.
type DataRegionsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataRegionsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataRegionsListResponseMultiError) AllErrors() []error { return m }

// DataRegionsListResponseValidationError is the validation error returned by
// DataRegionsListResponse.Validate if the designated constraints aren't met.
type DataRegionsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataRegionsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataRegionsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataRegionsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataRegionsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataRegionsListResponseValidationError) ErrorName() string {
	return "DataRegionsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DataRegionsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataRegionsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataRegionsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataRegionsListResponseValidationError{}

// Validate checks the field values on TokenUpgradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenUpgradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenUpgradeRequestMultiError, or nil if none found.
func (m *TokenUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPublicToken()) < 1 {
		err := TokenUpgradeRequestValidationError{
			field:  "PublicToken",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	// no validation rules for ExpiresInSeconds

	// no validation rules for MaxIdleTimeMinutes

	if len(errors) > 0 {
		return TokenUpgradeRequestMultiError(errors)
	}

	return nil
}

// TokenUpgradeRequestMultiError is an error wrapping multiple validation
// errors returned by TokenUpgradeRequest.ValidateAll() if the designated
// constraints aren't met.
type TokenUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenUpgradeRequestMultiError) AllErrors() []error { return m }

// TokenUpgradeRequestValidationError is the validation error returned by
// TokenUpgradeRequest.Validate if the designated constraints aren't met.
type TokenUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenUpgradeRequestValidationError) ErrorName() string {
	return "TokenUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TokenUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenUpgradeRequestValidationError{}

// Validate checks the field values on TokenUpgradeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenUpgradeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenUpgradeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenUpgradeResponseMultiError, or nil if none found.
func (m *TokenUpgradeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenUpgradeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppAccessToken

	if len(errors) > 0 {
		return TokenUpgradeResponseMultiError(errors)
	}

	return nil
}

// TokenUpgradeResponseMultiError is an error wrapping multiple validation
// errors returned by TokenUpgradeResponse.ValidateAll() if the designated
// constraints aren't met.
type TokenUpgradeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenUpgradeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenUpgradeResponseMultiError) AllErrors() []error { return m }

// TokenUpgradeResponseValidationError is the validation error returned by
// TokenUpgradeResponse.Validate if the designated constraints aren't met.
type TokenUpgradeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenUpgradeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenUpgradeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenUpgradeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenUpgradeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenUpgradeResponseValidationError) ErrorName() string {
	return "TokenUpgradeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TokenUpgradeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenUpgradeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenUpgradeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenUpgradeResponseValidationError{}

// Validate checks the field values on RevokeAppTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAppTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAppTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAppTokenRequestMultiError, or nil if none found.
func (m *RevokeAppTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAppTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUserId()) < 1 {
		err := RevokeAppTokenRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevokeAppTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeAppTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeAppTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeAppTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAppTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAppTokenRequestMultiError) AllErrors() []error { return m }

// RevokeAppTokenRequestValidationError is the validation error returned by
// RevokeAppTokenRequest.Validate if the designated constraints aren't met.
type RevokeAppTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAppTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAppTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAppTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAppTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAppTokenRequestValidationError) ErrorName() string {
	return "RevokeAppTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAppTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAppTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAppTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAppTokenRequestValidationError{}
