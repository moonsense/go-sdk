// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: data_plane_v2.proto

package v2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagination "github.com/moonsense/go-sdk/moonsense/models/pb/pagination"
	bundle "github.com/moonsense/go-sdk/moonsense/models/pb/v2/bundle"
	common "github.com/moonsense/go-sdk/moonsense/models/pb/v2/common"
	data_plane_sdk "github.com/moonsense/go-sdk/moonsense/models/pb/v2/data-plane-sdk"
	feature "github.com/moonsense/go-sdk/moonsense/models/pb/v2/feature"
	signal "github.com/moonsense/go-sdk/moonsense/models/pb/v2/signal"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported events for which we can trigger a webhook.
type WebhookEventTypes int32

const (
	WebhookEventTypes_UNKNOWN          WebhookEventTypes = 0
	WebhookEventTypes_SESSION_CREATED  WebhookEventTypes = 1
	WebhookEventTypes_BUNDLE_RECEIVED  WebhookEventTypes = 2
	WebhookEventTypes_CHUNK_PERSISTED  WebhookEventTypes = 3
	WebhookEventTypes_SESSION_INACTIVE WebhookEventTypes = 4
)

// Enum value maps for WebhookEventTypes.
var (
	WebhookEventTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "SESSION_CREATED",
		2: "BUNDLE_RECEIVED",
		3: "CHUNK_PERSISTED",
		4: "SESSION_INACTIVE",
	}
	WebhookEventTypes_value = map[string]int32{
		"UNKNOWN":          0,
		"SESSION_CREATED":  1,
		"BUNDLE_RECEIVED":  2,
		"CHUNK_PERSISTED":  3,
		"SESSION_INACTIVE": 4,
	}
)

func (x WebhookEventTypes) Enum() *WebhookEventTypes {
	p := new(WebhookEventTypes)
	*p = x
	return p
}

func (x WebhookEventTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookEventTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_data_plane_v2_proto_enumTypes[0].Descriptor()
}

func (WebhookEventTypes) Type() protoreflect.EnumType {
	return &file_data_plane_v2_proto_enumTypes[0]
}

func (x WebhookEventTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookEventTypes.Descriptor instead.
func (WebhookEventTypes) EnumDescriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{0}
}

// A summary of label statistics
type LabelWithStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SessionsCount int64  `protobuf:"varint,2,opt,name=sessions_count,json=sessionsCount,proto3" json:"sessions_count,omitempty"`
}

func (x *LabelWithStats) Reset() {
	*x = LabelWithStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelWithStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelWithStats) ProtoMessage() {}

func (x *LabelWithStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelWithStats.ProtoReflect.Descriptor instead.
func (*LabelWithStats) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{0}
}

func (x *LabelWithStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabelWithStats) GetSessionsCount() int64 {
	if x != nil {
		return x.SessionsCount
	}
	return 0
}

// General info about an App
type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string                 `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProjectId string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{1}
}

func (x *App) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *App) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *App) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Contains statistics around an App. For example,
// it can display the number of recordings against
// each recording profile
type AppStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                 string           `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	RecordingProfileStats map[string]int64 `protobuf:"bytes,2,rep,name=recording_profile_stats,json=recordingProfileStats,proto3" json:"recording_profile_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AppStats) Reset() {
	*x = AppStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStats) ProtoMessage() {}

func (x *AppStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStats.ProtoReflect.Descriptor instead.
func (*AppStats) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{2}
}

func (x *AppStats) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppStats) GetRecordingProfileStats() map[string]int64 {
	if x != nil {
		return x.RecordingProfileStats
	}
	return nil
}

// Information about a stored group of bundles
type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId   string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Md5       string                 `protobuf:"bytes,2,opt,name=md5,proto3" json:"md5,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{3}
}

func (x *Chunk) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *Chunk) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *Chunk) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// A card to be used for display of session
// related information to a user
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Required on create request
	CardId      string                 `protobuf:"bytes,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Title       string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	SourceType  string                 `protobuf:"bytes,5,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	SourceId    string                 `protobuf:"bytes,6,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Payload     string                 `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{4}
}

func (x *Card) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Card) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *Card) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Card) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Card) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *Card) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Card) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Card) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//Container for all the information required to be packaged in the webhook.
type WebhookPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"` // checked in the handler since not all event types can provide a projectId.
	AppId     string               `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SessionId string               `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	EventType WebhookEventTypes    `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=v2.dataplane.WebhookEventTypes" json:"event_type,omitempty"`
	Bundle    *bundle.SealedBundle `protobuf:"bytes,5,opt,name=bundle,proto3" json:"bundle,omitempty"` // payload is optional and only a small number of events require a bundle.
	// Deprecated: Do not use.
	ClientSessionGroupId string   `protobuf:"bytes,6,opt,name=client_session_group_id,json=clientSessionGroupId,proto3" json:"client_session_group_id,omitempty"`
	SessionLabels        []string `protobuf:"bytes,7,rep,name=session_labels,json=sessionLabels,proto3" json:"session_labels,omitempty"`
	JourneyId            string   `protobuf:"bytes,8,opt,name=journey_id,json=journeyId,proto3" json:"journey_id,omitempty"`
}

func (x *WebhookPayload) Reset() {
	*x = WebhookPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayload) ProtoMessage() {}

func (x *WebhookPayload) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayload.ProtoReflect.Descriptor instead.
func (*WebhookPayload) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{5}
}

func (x *WebhookPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *WebhookPayload) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WebhookPayload) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WebhookPayload) GetEventType() WebhookEventTypes {
	if x != nil {
		return x.EventType
	}
	return WebhookEventTypes_UNKNOWN
}

func (x *WebhookPayload) GetBundle() *bundle.SealedBundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

// Deprecated: Do not use.
func (x *WebhookPayload) GetClientSessionGroupId() string {
	if x != nil {
		return x.ClientSessionGroupId
	}
	return ""
}

func (x *WebhookPayload) GetSessionLabels() []string {
	if x != nil {
		return x.SessionLabels
	}
	return nil
}

func (x *WebhookPayload) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

// A grouping of sessions using an automatically
// generated or user-defined `journey_id`. Journeys
// are app specific and can be used to gather insights
// that span multiple sessions.
type Journey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the journey
	JourneyId string `protobuf:"bytes,1,opt,name=journey_id,json=journeyId,proto3" json:"journey_id,omitempty"`
	// The ID of the application this journey is
	// associated with
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The first event tracked within a session
	// inside this journey
	OldestEvent *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=oldest_event,json=oldestEvent,proto3" json:"oldest_event,omitempty"`
	// The latest event tracked within a session
	// inside this journey
	NewestEvent *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=newest_event,json=newestEvent,proto3" json:"newest_event,omitempty"`
	// The server timestamp of when this journey
	// was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The number of sessions contained within this journey
	SessionCount int32 `protobuf:"varint,6,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
	// The platform of the most commonly used device
	// across the sessions within the journey
	//
	// This is expected to be the same across all sessions
	// within a journey
	PrimaryPlatform common.DevicePlatform `protobuf:"varint,7,opt,name=primary_platform,json=primaryPlatform,proto3,enum=v2.common.DevicePlatform" json:"primary_platform,omitempty"`
	// The most commonly used region across the sessions
	//
	// This is expected to be the same across all sessions
	// within a journey
	PrimaryRegionId string `protobuf:"bytes,8,opt,name=primary_region_id,json=primaryRegionId,proto3" json:"primary_region_id,omitempty"`
}

func (x *Journey) Reset() {
	*x = Journey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Journey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Journey) ProtoMessage() {}

func (x *Journey) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Journey.ProtoReflect.Descriptor instead.
func (*Journey) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{6}
}

func (x *Journey) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

func (x *Journey) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Journey) GetOldestEvent() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestEvent
	}
	return nil
}

func (x *Journey) GetNewestEvent() *timestamppb.Timestamp {
	if x != nil {
		return x.NewestEvent
	}
	return nil
}

func (x *Journey) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Journey) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *Journey) GetPrimaryPlatform() common.DevicePlatform {
	if x != nil {
		return x.PrimaryPlatform
	}
	return common.DevicePlatform(0)
}

func (x *Journey) GetPrimaryRegionId() string {
	if x != nil {
		return x.PrimaryRegionId
	}
	return ""
}

// Response to GET "/sessions"
type SessionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions   []*data_plane_sdk.Session      `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SessionListResponse) Reset() {
	*x = SessionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionListResponse) ProtoMessage() {}

func (x *SessionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionListResponse.ProtoReflect.Descriptor instead.
func (*SessionListResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{7}
}

func (x *SessionListResponse) GetSessions() []*data_plane_sdk.Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *SessionListResponse) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to DELETE "/sessions/:id"
type SessionDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionDeleteResponse) Reset() {
	*x = SessionDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteResponse) ProtoMessage() {}

func (x *SessionDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteResponse.ProtoReflect.Descriptor instead.
func (*SessionDeleteResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{8}
}

func (x *SessionDeleteResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Response to GET "/journeys"
type JourneyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Journeys   []*Journey                     `protobuf:"bytes,1,rep,name=journeys,proto3" json:"journeys,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *JourneyListResponse) Reset() {
	*x = JourneyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JourneyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JourneyListResponse) ProtoMessage() {}

func (x *JourneyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JourneyListResponse.ProtoReflect.Descriptor instead.
func (*JourneyListResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{9}
}

func (x *JourneyListResponse) GetJourneys() []*Journey {
	if x != nil {
		return x.Journeys
	}
	return nil
}

func (x *JourneyListResponse) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to GET "/journeys/:id"
type JourneyDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Journey  *Journey                  `protobuf:"bytes,1,opt,name=journey,proto3" json:"journey,omitempty"`
	Sessions []*data_plane_sdk.Session `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *JourneyDetailResponse) Reset() {
	*x = JourneyDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JourneyDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JourneyDetailResponse) ProtoMessage() {}

func (x *JourneyDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JourneyDetailResponse.ProtoReflect.Descriptor instead.
func (*JourneyDetailResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{10}
}

func (x *JourneyDetailResponse) GetJourney() *Journey {
	if x != nil {
		return x.Journey
	}
	return nil
}

func (x *JourneyDetailResponse) GetSessions() []*data_plane_sdk.Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// Response to GET "/sessions/:id/chunks"
type ChunksListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string                         `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Chunks     []*Chunk                       `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ChunksListResponse) Reset() {
	*x = ChunksListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunksListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksListResponse) ProtoMessage() {}

func (x *ChunksListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksListResponse.ProtoReflect.Descriptor instead.
func (*ChunksListResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{11}
}

func (x *ChunksListResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChunksListResponse) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *ChunksListResponse) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to GET "/cards"
type CardListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string                         `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Cards      []*Card                        `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *CardListResponse) Reset() {
	*x = CardListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardListResponse) ProtoMessage() {}

func (x *CardListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardListResponse.ProtoReflect.Descriptor instead.
func (*CardListResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{12}
}

func (x *CardListResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CardListResponse) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *CardListResponse) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to DELETE "/cards/:id"
type CardDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId string `protobuf:"bytes,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *CardDeleteResponse) Reset() {
	*x = CardDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDeleteResponse) ProtoMessage() {}

func (x *CardDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardDeleteResponse.ProtoReflect.Descriptor instead.
func (*CardDeleteResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{13}
}

func (x *CardDeleteResponse) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

// Response to GET "/labels"
type LabelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*data_plane_sdk.SessionLabel `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *LabelListResponse) Reset() {
	*x = LabelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelListResponse) ProtoMessage() {}

func (x *LabelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelListResponse.ProtoReflect.Descriptor instead.
func (*LabelListResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{14}
}

func (x *LabelListResponse) GetLabels() []*data_plane_sdk.SessionLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

// A list of labels and their usage count
type LabelsTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*LabelWithStats `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *LabelsTopResponse) Reset() {
	*x = LabelsTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelsTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelsTopResponse) ProtoMessage() {}

func (x *LabelsTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelsTopResponse.ProtoReflect.Descriptor instead.
func (*LabelsTopResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{15}
}

func (x *LabelsTopResponse) GetLabels() []*LabelWithStats {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Response to the fields API.
type PaginatedFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle           *bundle.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	MaxDeterminedAt  int64          `protobuf:"varint,2,opt,name=max_determined_at,json=maxDeterminedAt,proto3" json:"max_determined_at,omitempty"`
	FromBundleCursor int64          `protobuf:"varint,3,opt,name=from_bundle_cursor,json=fromBundleCursor,proto3" json:"from_bundle_cursor,omitempty"`
}

func (x *PaginatedFieldsResponse) Reset() {
	*x = PaginatedFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedFieldsResponse) ProtoMessage() {}

func (x *PaginatedFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedFieldsResponse.ProtoReflect.Descriptor instead.
func (*PaginatedFieldsResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{16}
}

func (x *PaginatedFieldsResponse) GetBundle() *bundle.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *PaginatedFieldsResponse) GetMaxDeterminedAt() int64 {
	if x != nil {
		return x.MaxDeterminedAt
	}
	return 0
}

func (x *PaginatedFieldsResponse) GetFromBundleCursor() int64 {
	if x != nil {
		return x.FromBundleCursor
	}
	return 0
}

// A wrapper around a captured feature to provide
// additional context
type FeatureEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The feature that was captured
	Feature *feature.Feature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	// An identifying element to provide addition
	// context. For example, a bundle id
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *FeatureEnvelope) Reset() {
	*x = FeatureEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureEnvelope) ProtoMessage() {}

func (x *FeatureEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureEnvelope.ProtoReflect.Descriptor instead.
func (*FeatureEnvelope) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{17}
}

func (x *FeatureEnvelope) GetFeature() *feature.Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *FeatureEnvelope) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FeatureEnvelopeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features []*FeatureEnvelope `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *FeatureEnvelopeList) Reset() {
	*x = FeatureEnvelopeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureEnvelopeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureEnvelopeList) ProtoMessage() {}

func (x *FeatureEnvelopeList) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureEnvelopeList.ProtoReflect.Descriptor instead.
func (*FeatureEnvelopeList) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{18}
}

func (x *FeatureEnvelopeList) GetFeatures() []*FeatureEnvelope {
	if x != nil {
		return x.Features
	}
	return nil
}

// Response for GET "/sessions/:session_id/features"
// This response is being deprecated. Use the SessionFeaturesResponse and JourneyFeaturesResponse instead.
type FeatureListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// A map of Feature Names to a list of Features captured
	Features map[string]*FeatureEnvelopeList `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FeatureListResponse) Reset() {
	*x = FeatureListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureListResponse) ProtoMessage() {}

func (x *FeatureListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureListResponse.ProtoReflect.Descriptor instead.
func (*FeatureListResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{19}
}

func (x *FeatureListResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FeatureListResponse) GetFeatures() map[string]*FeatureEnvelopeList {
	if x != nil {
		return x.Features
	}
	return nil
}

// Response for GET "/sessions/:session_id/features"
type SessionFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// A map of Feature Names to a Feature - computed on the client side.
	ClientSdk map[string]*feature.Feature `protobuf:"bytes,2,rep,name=client_sdk,json=clientSdk,proto3" json:"client_sdk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of Feature Names to a Feature - computed on the server side - that is related to the network data.
	CloudNetwork map[string]*feature.Feature `protobuf:"bytes,3,rep,name=cloud_network,json=cloudNetwork,proto3" json:"cloud_network,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of Feature Names to a Feature - computed on the server side - that is related to the behavioral data.
	CloudBehavioral map[string]*feature.Feature `protobuf:"bytes,4,rep,name=cloud_behavioral,json=cloudBehavioral,proto3" json:"cloud_behavioral,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SessionFeaturesResponse) Reset() {
	*x = SessionFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionFeaturesResponse) ProtoMessage() {}

func (x *SessionFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionFeaturesResponse.ProtoReflect.Descriptor instead.
func (*SessionFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{20}
}

func (x *SessionFeaturesResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionFeaturesResponse) GetClientSdk() map[string]*feature.Feature {
	if x != nil {
		return x.ClientSdk
	}
	return nil
}

func (x *SessionFeaturesResponse) GetCloudNetwork() map[string]*feature.Feature {
	if x != nil {
		return x.CloudNetwork
	}
	return nil
}

func (x *SessionFeaturesResponse) GetCloudBehavioral() map[string]*feature.Feature {
	if x != nil {
		return x.CloudBehavioral
	}
	return nil
}

// Response for GET "/journeys/:journey_id/features"
type JourneyFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JourneyId string `protobuf:"bytes,1,opt,name=journey_id,json=journeyId,proto3" json:"journey_id,omitempty"`
	// A map of Feature Names to a Feature - computed on the client side.
	ClientSdk map[string]*feature.Feature `protobuf:"bytes,2,rep,name=client_sdk,json=clientSdk,proto3" json:"client_sdk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of Feature Names to a Feature - computed on the server side - that is related to the network data.
	CloudNetwork map[string]*feature.Feature `protobuf:"bytes,3,rep,name=cloud_network,json=cloudNetwork,proto3" json:"cloud_network,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of Feature Names to a Feature - computed on the server side - that is related to the behavioral data.
	CloudBehavioral map[string]*feature.Feature `protobuf:"bytes,4,rep,name=cloud_behavioral,json=cloudBehavioral,proto3" json:"cloud_behavioral,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JourneyFeaturesResponse) Reset() {
	*x = JourneyFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JourneyFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JourneyFeaturesResponse) ProtoMessage() {}

func (x *JourneyFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JourneyFeaturesResponse.ProtoReflect.Descriptor instead.
func (*JourneyFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{21}
}

func (x *JourneyFeaturesResponse) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

func (x *JourneyFeaturesResponse) GetClientSdk() map[string]*feature.Feature {
	if x != nil {
		return x.ClientSdk
	}
	return nil
}

func (x *JourneyFeaturesResponse) GetCloudNetwork() map[string]*feature.Feature {
	if x != nil {
		return x.CloudNetwork
	}
	return nil
}

func (x *JourneyFeaturesResponse) GetCloudBehavioral() map[string]*feature.Feature {
	if x != nil {
		return x.CloudBehavioral
	}
	return nil
}

// Response for GET "/sessions/:session_id/signals"
type SignalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os *signal.Os `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
}

func (x *SignalsResponse) Reset() {
	*x = SignalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_plane_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalsResponse) ProtoMessage() {}

func (x *SignalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_plane_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalsResponse.ProtoReflect.Descriptor instead.
func (*SignalsResponse) Descriptor() ([]byte, []int) {
	return file_data_plane_v2_proto_rawDescGZIP(), []int{22}
}

func (x *SignalsResponse) GetOs() *signal.Os {
	if x != nil {
		return x.Os
	}
	return nil
}

var File_data_plane_v2_proto protoreflect.FileDescriptor

var file_data_plane_v2_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x76, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x76, 0x32, 0x5f,
	0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd6, 0x01, 0x0a,
	0x08, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x69, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x48, 0x0a, 0x1a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20,
	0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0x8f, 0x03, 0x0a, 0x07, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x13, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x08,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x15, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x49,
	0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x32, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x0f, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x76, 0x32, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x50,
	0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xe1, 0x01, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x04, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x64, 0x6b, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x65, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x61, 0x6c, 0x1a, 0x51, 0x0a, 0x0e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x32, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x11,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x57, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x04, 0x0a, 0x17,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x64, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x64, 0x6b, 0x12, 0x5c, 0x0a, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x65, 0x0a, 0x10, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x61, 0x6c,
	0x1a, 0x51, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x14, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x30, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x73,
	0x52, 0x02, 0x6f, 0x73, 0x2a, 0x75, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x42, 0x5b, 0x0a, 0x20, 0x69,
	0x6f, 0x2e, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42,
	0x11, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x5a, 0x24, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x69, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_plane_v2_proto_rawDescOnce sync.Once
	file_data_plane_v2_proto_rawDescData = file_data_plane_v2_proto_rawDesc
)

func file_data_plane_v2_proto_rawDescGZIP() []byte {
	file_data_plane_v2_proto_rawDescOnce.Do(func() {
		file_data_plane_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_plane_v2_proto_rawDescData)
	})
	return file_data_plane_v2_proto_rawDescData
}

var file_data_plane_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_data_plane_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_data_plane_v2_proto_goTypes = []interface{}{
	(WebhookEventTypes)(0),                // 0: v2.dataplane.WebhookEventTypes
	(*LabelWithStats)(nil),                // 1: v2.dataplane.LabelWithStats
	(*App)(nil),                           // 2: v2.dataplane.App
	(*AppStats)(nil),                      // 3: v2.dataplane.AppStats
	(*Chunk)(nil),                         // 4: v2.dataplane.Chunk
	(*Card)(nil),                          // 5: v2.dataplane.Card
	(*WebhookPayload)(nil),                // 6: v2.dataplane.WebhookPayload
	(*Journey)(nil),                       // 7: v2.dataplane.Journey
	(*SessionListResponse)(nil),           // 8: v2.dataplane.SessionListResponse
	(*SessionDeleteResponse)(nil),         // 9: v2.dataplane.SessionDeleteResponse
	(*JourneyListResponse)(nil),           // 10: v2.dataplane.JourneyListResponse
	(*JourneyDetailResponse)(nil),         // 11: v2.dataplane.JourneyDetailResponse
	(*ChunksListResponse)(nil),            // 12: v2.dataplane.ChunksListResponse
	(*CardListResponse)(nil),              // 13: v2.dataplane.CardListResponse
	(*CardDeleteResponse)(nil),            // 14: v2.dataplane.CardDeleteResponse
	(*LabelListResponse)(nil),             // 15: v2.dataplane.LabelListResponse
	(*LabelsTopResponse)(nil),             // 16: v2.dataplane.LabelsTopResponse
	(*PaginatedFieldsResponse)(nil),       // 17: v2.dataplane.PaginatedFieldsResponse
	(*FeatureEnvelope)(nil),               // 18: v2.dataplane.FeatureEnvelope
	(*FeatureEnvelopeList)(nil),           // 19: v2.dataplane.FeatureEnvelopeList
	(*FeatureListResponse)(nil),           // 20: v2.dataplane.FeatureListResponse
	(*SessionFeaturesResponse)(nil),       // 21: v2.dataplane.SessionFeaturesResponse
	(*JourneyFeaturesResponse)(nil),       // 22: v2.dataplane.JourneyFeaturesResponse
	(*SignalsResponse)(nil),               // 23: v2.dataplane.SignalsResponse
	nil,                                   // 24: v2.dataplane.AppStats.RecordingProfileStatsEntry
	nil,                                   // 25: v2.dataplane.FeatureListResponse.FeaturesEntry
	nil,                                   // 26: v2.dataplane.SessionFeaturesResponse.ClientSdkEntry
	nil,                                   // 27: v2.dataplane.SessionFeaturesResponse.CloudNetworkEntry
	nil,                                   // 28: v2.dataplane.SessionFeaturesResponse.CloudBehavioralEntry
	nil,                                   // 29: v2.dataplane.JourneyFeaturesResponse.ClientSdkEntry
	nil,                                   // 30: v2.dataplane.JourneyFeaturesResponse.CloudNetworkEntry
	nil,                                   // 31: v2.dataplane.JourneyFeaturesResponse.CloudBehavioralEntry
	(*timestamppb.Timestamp)(nil),         // 32: google.protobuf.Timestamp
	(*bundle.SealedBundle)(nil),           // 33: v2.bundle.SealedBundle
	(common.DevicePlatform)(0),            // 34: v2.common.DevicePlatform
	(*data_plane_sdk.Session)(nil),        // 35: v2.dataplane.Session
	(*pagination.PaginationResponse)(nil), // 36: pagination.PaginationResponse
	(*data_plane_sdk.SessionLabel)(nil),   // 37: v2.dataplane.SessionLabel
	(*bundle.Bundle)(nil),                 // 38: v2.bundle.Bundle
	(*feature.Feature)(nil),               // 39: v2.feature.Feature
	(*signal.Os)(nil),                     // 40: v2.signal.Os
}
var file_data_plane_v2_proto_depIdxs = []int32{
	32, // 0: v2.dataplane.App.created_at:type_name -> google.protobuf.Timestamp
	24, // 1: v2.dataplane.AppStats.recording_profile_stats:type_name -> v2.dataplane.AppStats.RecordingProfileStatsEntry
	32, // 2: v2.dataplane.Chunk.created_at:type_name -> google.protobuf.Timestamp
	32, // 3: v2.dataplane.Card.created_at:type_name -> google.protobuf.Timestamp
	0,  // 4: v2.dataplane.WebhookPayload.event_type:type_name -> v2.dataplane.WebhookEventTypes
	33, // 5: v2.dataplane.WebhookPayload.bundle:type_name -> v2.bundle.SealedBundle
	32, // 6: v2.dataplane.Journey.oldest_event:type_name -> google.protobuf.Timestamp
	32, // 7: v2.dataplane.Journey.newest_event:type_name -> google.protobuf.Timestamp
	32, // 8: v2.dataplane.Journey.created_at:type_name -> google.protobuf.Timestamp
	34, // 9: v2.dataplane.Journey.primary_platform:type_name -> v2.common.DevicePlatform
	35, // 10: v2.dataplane.SessionListResponse.sessions:type_name -> v2.dataplane.Session
	36, // 11: v2.dataplane.SessionListResponse.pagination:type_name -> pagination.PaginationResponse
	7,  // 12: v2.dataplane.JourneyListResponse.journeys:type_name -> v2.dataplane.Journey
	36, // 13: v2.dataplane.JourneyListResponse.pagination:type_name -> pagination.PaginationResponse
	7,  // 14: v2.dataplane.JourneyDetailResponse.journey:type_name -> v2.dataplane.Journey
	35, // 15: v2.dataplane.JourneyDetailResponse.sessions:type_name -> v2.dataplane.Session
	4,  // 16: v2.dataplane.ChunksListResponse.chunks:type_name -> v2.dataplane.Chunk
	36, // 17: v2.dataplane.ChunksListResponse.pagination:type_name -> pagination.PaginationResponse
	5,  // 18: v2.dataplane.CardListResponse.cards:type_name -> v2.dataplane.Card
	36, // 19: v2.dataplane.CardListResponse.pagination:type_name -> pagination.PaginationResponse
	37, // 20: v2.dataplane.LabelListResponse.labels:type_name -> v2.dataplane.SessionLabel
	1,  // 21: v2.dataplane.LabelsTopResponse.labels:type_name -> v2.dataplane.LabelWithStats
	38, // 22: v2.dataplane.PaginatedFieldsResponse.bundle:type_name -> v2.bundle.Bundle
	39, // 23: v2.dataplane.FeatureEnvelope.feature:type_name -> v2.feature.Feature
	18, // 24: v2.dataplane.FeatureEnvelopeList.features:type_name -> v2.dataplane.FeatureEnvelope
	25, // 25: v2.dataplane.FeatureListResponse.features:type_name -> v2.dataplane.FeatureListResponse.FeaturesEntry
	26, // 26: v2.dataplane.SessionFeaturesResponse.client_sdk:type_name -> v2.dataplane.SessionFeaturesResponse.ClientSdkEntry
	27, // 27: v2.dataplane.SessionFeaturesResponse.cloud_network:type_name -> v2.dataplane.SessionFeaturesResponse.CloudNetworkEntry
	28, // 28: v2.dataplane.SessionFeaturesResponse.cloud_behavioral:type_name -> v2.dataplane.SessionFeaturesResponse.CloudBehavioralEntry
	29, // 29: v2.dataplane.JourneyFeaturesResponse.client_sdk:type_name -> v2.dataplane.JourneyFeaturesResponse.ClientSdkEntry
	30, // 30: v2.dataplane.JourneyFeaturesResponse.cloud_network:type_name -> v2.dataplane.JourneyFeaturesResponse.CloudNetworkEntry
	31, // 31: v2.dataplane.JourneyFeaturesResponse.cloud_behavioral:type_name -> v2.dataplane.JourneyFeaturesResponse.CloudBehavioralEntry
	40, // 32: v2.dataplane.SignalsResponse.os:type_name -> v2.signal.Os
	19, // 33: v2.dataplane.FeatureListResponse.FeaturesEntry.value:type_name -> v2.dataplane.FeatureEnvelopeList
	39, // 34: v2.dataplane.SessionFeaturesResponse.ClientSdkEntry.value:type_name -> v2.feature.Feature
	39, // 35: v2.dataplane.SessionFeaturesResponse.CloudNetworkEntry.value:type_name -> v2.feature.Feature
	39, // 36: v2.dataplane.SessionFeaturesResponse.CloudBehavioralEntry.value:type_name -> v2.feature.Feature
	39, // 37: v2.dataplane.JourneyFeaturesResponse.ClientSdkEntry.value:type_name -> v2.feature.Feature
	39, // 38: v2.dataplane.JourneyFeaturesResponse.CloudNetworkEntry.value:type_name -> v2.feature.Feature
	39, // 39: v2.dataplane.JourneyFeaturesResponse.CloudBehavioralEntry.value:type_name -> v2.feature.Feature
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_data_plane_v2_proto_init() }
func file_data_plane_v2_proto_init() {
	if File_data_plane_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_plane_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelWithStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Journey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JourneyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JourneyDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunksListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelsTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureEnvelopeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JourneyFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_plane_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_plane_v2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_plane_v2_proto_goTypes,
		DependencyIndexes: file_data_plane_v2_proto_depIdxs,
		EnumInfos:         file_data_plane_v2_proto_enumTypes,
		MessageInfos:      file_data_plane_v2_proto_msgTypes,
	}.Build()
	File_data_plane_v2_proto = out.File
	file_data_plane_v2_proto_rawDesc = nil
	file_data_plane_v2_proto_goTypes = nil
	file_data_plane_v2_proto_depIdxs = nil
}
